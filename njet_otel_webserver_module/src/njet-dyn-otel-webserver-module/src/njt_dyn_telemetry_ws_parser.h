

/* This file was generated by JSON Schema to C.
 * Any changes made to it will be lost on regeneration. 

 * Copyright (C) 2021-2023  TMLake(Beijing) Technology Co., Ltd.
 */

#ifndef PARSER_TELEMETRY_WS_H
#define PARSER_TELEMETRY_WS_H
#include <stdint.h>
#include <stdbool.h>
#include "njt_core.h"
#include "js2c_njet_builtins.h"
/* ===================== Generated type declarations ===================== */
typedef struct dyn_telemetry_webserver_locationDef_t_s dyn_telemetry_webserver_locationDef_t; //forward decl for public definition
typedef njt_str_t dyn_telemetry_webserver_locationDef_location_t;

typedef bool dyn_telemetry_webserver_locationDef_NjetModuleEnabled_t;
typedef dyn_telemetry_webserver_locationDef_t dyn_telemetry_webserver_locationDef_locations_item_t; //ref def
typedef njt_array_t  dyn_telemetry_webserver_locationDef_locations_t;
typedef struct dyn_telemetry_webserver_locationDef_t_s {
    dyn_telemetry_webserver_locationDef_location_t location;
    dyn_telemetry_webserver_locationDef_NjetModuleEnabled_t NjetModuleEnabled;
    dyn_telemetry_webserver_locationDef_locations_t *locations;
    unsigned int is_location_set:1;
    unsigned int is_NjetModuleEnabled_set:1;
    unsigned int is_locations_set:1;
} dyn_telemetry_webserver_locationDef_t;

dyn_telemetry_webserver_locationDef_locations_item_t* get_dyn_telemetry_webserver_locationDef_locations_item(dyn_telemetry_webserver_locationDef_locations_t *out, size_t idx);
dyn_telemetry_webserver_locationDef_location_t* get_dyn_telemetry_webserver_locationDef_location(dyn_telemetry_webserver_locationDef_t *out);
dyn_telemetry_webserver_locationDef_NjetModuleEnabled_t get_dyn_telemetry_webserver_locationDef_NjetModuleEnabled(dyn_telemetry_webserver_locationDef_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dyn_telemetry_webserver_locationDef_locations_t* get_dyn_telemetry_webserver_locationDef_locations(dyn_telemetry_webserver_locationDef_t *out);
void set_dyn_telemetry_webserver_locationDef_location(dyn_telemetry_webserver_locationDef_t* obj, dyn_telemetry_webserver_locationDef_location_t* field);
void set_dyn_telemetry_webserver_locationDef_NjetModuleEnabled(dyn_telemetry_webserver_locationDef_t* obj, dyn_telemetry_webserver_locationDef_NjetModuleEnabled_t field);
int add_item_dyn_telemetry_webserver_locationDef_locations(dyn_telemetry_webserver_locationDef_locations_t *src, dyn_telemetry_webserver_locationDef_locations_item_t* items);
dyn_telemetry_webserver_locationDef_locations_t* create_dyn_telemetry_webserver_locationDef_locations(njt_pool_t *pool, size_t nelts);
void set_dyn_telemetry_webserver_locationDef_locations(dyn_telemetry_webserver_locationDef_t* obj, dyn_telemetry_webserver_locationDef_locations_t* field);
dyn_telemetry_webserver_locationDef_t* create_dyn_telemetry_webserver_locationDef(njt_pool_t *pool);
typedef njt_str_t dyn_telemetry_webserver_servers_item_listens_item_t;

typedef njt_array_t  dyn_telemetry_webserver_servers_item_listens_t;
typedef njt_str_t dyn_telemetry_webserver_servers_item_serverNames_item_t;

typedef njt_array_t  dyn_telemetry_webserver_servers_item_serverNames_t;
typedef dyn_telemetry_webserver_locationDef_t dyn_telemetry_webserver_servers_item_locations_item_t; //ref def
typedef njt_array_t  dyn_telemetry_webserver_servers_item_locations_t;
typedef struct dyn_telemetry_webserver_servers_item_t_s {
    dyn_telemetry_webserver_servers_item_listens_t *listens;
    dyn_telemetry_webserver_servers_item_serverNames_t *serverNames;
    dyn_telemetry_webserver_servers_item_locations_t *locations;
    unsigned int is_listens_set:1;
    unsigned int is_serverNames_set:1;
    unsigned int is_locations_set:1;
} dyn_telemetry_webserver_servers_item_t;

typedef njt_array_t  dyn_telemetry_webserver_servers_t;
typedef struct dyn_telemetry_webserver_t_s {
    dyn_telemetry_webserver_servers_t *servers;
    unsigned int is_servers_set:1;
} dyn_telemetry_webserver_t;

dyn_telemetry_webserver_servers_item_listens_item_t* get_dyn_telemetry_webserver_servers_item_listens_item(dyn_telemetry_webserver_servers_item_listens_t *out, size_t idx);
dyn_telemetry_webserver_servers_item_serverNames_item_t* get_dyn_telemetry_webserver_servers_item_serverNames_item(dyn_telemetry_webserver_servers_item_serverNames_t *out, size_t idx);
dyn_telemetry_webserver_servers_item_locations_item_t* get_dyn_telemetry_webserver_servers_item_locations_item(dyn_telemetry_webserver_servers_item_locations_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
dyn_telemetry_webserver_servers_item_listens_t* get_dyn_telemetry_webserver_servers_item_listens(dyn_telemetry_webserver_servers_item_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dyn_telemetry_webserver_servers_item_serverNames_t* get_dyn_telemetry_webserver_servers_item_serverNames(dyn_telemetry_webserver_servers_item_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dyn_telemetry_webserver_servers_item_locations_t* get_dyn_telemetry_webserver_servers_item_locations(dyn_telemetry_webserver_servers_item_t *out);
dyn_telemetry_webserver_servers_item_t* get_dyn_telemetry_webserver_servers_item(dyn_telemetry_webserver_servers_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
dyn_telemetry_webserver_servers_t* get_dyn_telemetry_webserver_servers(dyn_telemetry_webserver_t *out);
int add_item_dyn_telemetry_webserver_servers_item_listens(dyn_telemetry_webserver_servers_item_listens_t *src, dyn_telemetry_webserver_servers_item_listens_item_t* items);
dyn_telemetry_webserver_servers_item_listens_t* create_dyn_telemetry_webserver_servers_item_listens(njt_pool_t *pool, size_t nelts);
void set_dyn_telemetry_webserver_servers_item_listens(dyn_telemetry_webserver_servers_item_t* obj, dyn_telemetry_webserver_servers_item_listens_t* field);
int add_item_dyn_telemetry_webserver_servers_item_serverNames(dyn_telemetry_webserver_servers_item_serverNames_t *src, dyn_telemetry_webserver_servers_item_serverNames_item_t* items);
dyn_telemetry_webserver_servers_item_serverNames_t* create_dyn_telemetry_webserver_servers_item_serverNames(njt_pool_t *pool, size_t nelts);
void set_dyn_telemetry_webserver_servers_item_serverNames(dyn_telemetry_webserver_servers_item_t* obj, dyn_telemetry_webserver_servers_item_serverNames_t* field);
int add_item_dyn_telemetry_webserver_servers_item_locations(dyn_telemetry_webserver_servers_item_locations_t *src, dyn_telemetry_webserver_servers_item_locations_item_t* items);
dyn_telemetry_webserver_servers_item_locations_t* create_dyn_telemetry_webserver_servers_item_locations(njt_pool_t *pool, size_t nelts);
void set_dyn_telemetry_webserver_servers_item_locations(dyn_telemetry_webserver_servers_item_t* obj, dyn_telemetry_webserver_servers_item_locations_t* field);
dyn_telemetry_webserver_servers_item_t* create_dyn_telemetry_webserver_servers_item(njt_pool_t *pool);
int add_item_dyn_telemetry_webserver_servers(dyn_telemetry_webserver_servers_t *src, dyn_telemetry_webserver_servers_item_t* items);
dyn_telemetry_webserver_servers_t* create_dyn_telemetry_webserver_servers(njt_pool_t *pool, size_t nelts);
void set_dyn_telemetry_webserver_servers(dyn_telemetry_webserver_t* obj, dyn_telemetry_webserver_servers_t* field);
dyn_telemetry_webserver_t* create_dyn_telemetry_webserver(njt_pool_t *pool);
dyn_telemetry_webserver_t* json_parse_dyn_telemetry_webserver(njt_pool_t *pool, const njt_str_t *json_string, js2c_parse_error_t *err_ret);
njt_str_t* to_json_dyn_telemetry_webserver(njt_pool_t *pool, dyn_telemetry_webserver_t *out, njt_int_t flags);
#endif /* PARSER_TELEMETRY_WS_H */
