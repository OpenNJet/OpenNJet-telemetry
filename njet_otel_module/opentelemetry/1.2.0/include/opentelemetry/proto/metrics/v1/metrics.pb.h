// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "opentelemetry/proto/common/v1/common.pb.h"
#include "opentelemetry/proto/resource/v1/resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {
class Exemplar;
class ExemplarDefaultTypeInternal;
extern ExemplarDefaultTypeInternal _Exemplar_default_instance_;
class ExponentialHistogram;
class ExponentialHistogramDefaultTypeInternal;
extern ExponentialHistogramDefaultTypeInternal _ExponentialHistogram_default_instance_;
class ExponentialHistogramDataPoint;
class ExponentialHistogramDataPointDefaultTypeInternal;
extern ExponentialHistogramDataPointDefaultTypeInternal _ExponentialHistogramDataPoint_default_instance_;
class ExponentialHistogramDataPoint_Buckets;
class ExponentialHistogramDataPoint_BucketsDefaultTypeInternal;
extern ExponentialHistogramDataPoint_BucketsDefaultTypeInternal _ExponentialHistogramDataPoint_Buckets_default_instance_;
class Gauge;
class GaugeDefaultTypeInternal;
extern GaugeDefaultTypeInternal _Gauge_default_instance_;
class Histogram;
class HistogramDefaultTypeInternal;
extern HistogramDefaultTypeInternal _Histogram_default_instance_;
class HistogramDataPoint;
class HistogramDataPointDefaultTypeInternal;
extern HistogramDataPointDefaultTypeInternal _HistogramDataPoint_default_instance_;
class InstrumentationLibraryMetrics;
class InstrumentationLibraryMetricsDefaultTypeInternal;
extern InstrumentationLibraryMetricsDefaultTypeInternal _InstrumentationLibraryMetrics_default_instance_;
class IntDataPoint;
class IntDataPointDefaultTypeInternal;
extern IntDataPointDefaultTypeInternal _IntDataPoint_default_instance_;
class IntExemplar;
class IntExemplarDefaultTypeInternal;
extern IntExemplarDefaultTypeInternal _IntExemplar_default_instance_;
class IntGauge;
class IntGaugeDefaultTypeInternal;
extern IntGaugeDefaultTypeInternal _IntGauge_default_instance_;
class IntHistogram;
class IntHistogramDefaultTypeInternal;
extern IntHistogramDefaultTypeInternal _IntHistogram_default_instance_;
class IntHistogramDataPoint;
class IntHistogramDataPointDefaultTypeInternal;
extern IntHistogramDataPointDefaultTypeInternal _IntHistogramDataPoint_default_instance_;
class IntSum;
class IntSumDefaultTypeInternal;
extern IntSumDefaultTypeInternal _IntSum_default_instance_;
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricsData;
class MetricsDataDefaultTypeInternal;
extern MetricsDataDefaultTypeInternal _MetricsData_default_instance_;
class NumberDataPoint;
class NumberDataPointDefaultTypeInternal;
extern NumberDataPointDefaultTypeInternal _NumberDataPoint_default_instance_;
class ResourceMetrics;
class ResourceMetricsDefaultTypeInternal;
extern ResourceMetricsDefaultTypeInternal _ResourceMetrics_default_instance_;
class Sum;
class SumDefaultTypeInternal;
extern SumDefaultTypeInternal _Sum_default_instance_;
class Summary;
class SummaryDefaultTypeInternal;
extern SummaryDefaultTypeInternal _Summary_default_instance_;
class SummaryDataPoint;
class SummaryDataPointDefaultTypeInternal;
extern SummaryDataPointDefaultTypeInternal _SummaryDataPoint_default_instance_;
class SummaryDataPoint_ValueAtQuantile;
class SummaryDataPoint_ValueAtQuantileDefaultTypeInternal;
extern SummaryDataPoint_ValueAtQuantileDefaultTypeInternal _SummaryDataPoint_ValueAtQuantile_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> ::opentelemetry::proto::metrics::v1::Exemplar* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::Exemplar>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::ExponentialHistogram>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::Gauge* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::Gauge>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::Histogram* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::Histogram>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::HistogramDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::HistogramDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntExemplar* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntExemplar>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntGauge* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntGauge>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntHistogram* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntHistogram>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntHistogramDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::IntSum* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::IntSum>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::Metric* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::Metric>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::MetricsData* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::MetricsData>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::NumberDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::NumberDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::ResourceMetrics* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::ResourceMetrics>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::Sum* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::Sum>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::Summary* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::Summary>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::SummaryDataPoint* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::SummaryDataPoint>(Arena*);
template<> ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* Arena::CreateMaybeMessage<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {

enum AggregationTemporality : int {
  AGGREGATION_TEMPORALITY_UNSPECIFIED = 0,
  AGGREGATION_TEMPORALITY_DELTA = 1,
  AGGREGATION_TEMPORALITY_CUMULATIVE = 2,
  AggregationTemporality_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AggregationTemporality_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AggregationTemporality_IsValid(int value);
constexpr AggregationTemporality AggregationTemporality_MIN = AGGREGATION_TEMPORALITY_UNSPECIFIED;
constexpr AggregationTemporality AggregationTemporality_MAX = AGGREGATION_TEMPORALITY_CUMULATIVE;
constexpr int AggregationTemporality_ARRAYSIZE = AggregationTemporality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationTemporality_descriptor();
template<typename T>
inline const std::string& AggregationTemporality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AggregationTemporality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AggregationTemporality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AggregationTemporality_descriptor(), enum_t_value);
}
inline bool AggregationTemporality_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AggregationTemporality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggregationTemporality>(
    AggregationTemporality_descriptor(), name, value);
}
enum DataPointFlags : int {
  FLAG_NONE = 0,
  FLAG_NO_RECORDED_VALUE = 1,
  DataPointFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataPointFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DataPointFlags_IsValid(int value);
constexpr DataPointFlags DataPointFlags_MIN = FLAG_NONE;
constexpr DataPointFlags DataPointFlags_MAX = FLAG_NO_RECORDED_VALUE;
constexpr int DataPointFlags_ARRAYSIZE = DataPointFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPointFlags_descriptor();
template<typename T>
inline const std::string& DataPointFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataPointFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataPointFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataPointFlags_descriptor(), enum_t_value);
}
inline bool DataPointFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataPointFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataPointFlags>(
    DataPointFlags_descriptor(), name, value);
}
// ===================================================================

class MetricsData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.MetricsData) */ {
 public:
  inline MetricsData() : MetricsData(nullptr) {}
  virtual ~MetricsData();

  MetricsData(const MetricsData& from);
  MetricsData(MetricsData&& from) noexcept
    : MetricsData() {
    *this = ::std::move(from);
  }

  inline MetricsData& operator=(const MetricsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsData& operator=(MetricsData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricsData& default_instance();

  static inline const MetricsData* internal_default_instance() {
    return reinterpret_cast<const MetricsData*>(
               &_MetricsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetricsData& a, MetricsData& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricsData* New() const final {
    return CreateMaybeMessage<MetricsData>(nullptr);
  }

  MetricsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricsData& from);
  void MergeFrom(const MetricsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.MetricsData";
  }
  protected:
  explicit MetricsData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceMetricsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
  int resource_metrics_size() const;
  private:
  int _internal_resource_metrics_size() const;
  public:
  void clear_resource_metrics();
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* mutable_resource_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics >*
      mutable_resource_metrics();
  private:
  const ::opentelemetry::proto::metrics::v1::ResourceMetrics& _internal_resource_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* _internal_add_resource_metrics();
  public:
  const ::opentelemetry::proto::metrics::v1::ResourceMetrics& resource_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::ResourceMetrics* add_resource_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics >&
      resource_metrics() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.MetricsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics > resource_metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ResourceMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ResourceMetrics) */ {
 public:
  inline ResourceMetrics() : ResourceMetrics(nullptr) {}
  virtual ~ResourceMetrics();

  ResourceMetrics(const ResourceMetrics& from);
  ResourceMetrics(ResourceMetrics&& from) noexcept
    : ResourceMetrics() {
    *this = ::std::move(from);
  }

  inline ResourceMetrics& operator=(const ResourceMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMetrics& operator=(ResourceMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceMetrics& default_instance();

  static inline const ResourceMetrics* internal_default_instance() {
    return reinterpret_cast<const ResourceMetrics*>(
               &_ResourceMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourceMetrics& a, ResourceMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceMetrics* New() const final {
    return CreateMaybeMessage<ResourceMetrics>(nullptr);
  }

  ResourceMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceMetrics& from);
  void MergeFrom(const ResourceMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.ResourceMetrics";
  }
  protected:
  explicit ResourceMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentationLibraryMetricsFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kResourceFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
  int instrumentation_library_metrics_size() const;
  private:
  int _internal_instrumentation_library_metrics_size() const;
  public:
  void clear_instrumentation_library_metrics();
  ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* mutable_instrumentation_library_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >*
      mutable_instrumentation_library_metrics();
  private:
  const ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics& _internal_instrumentation_library_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* _internal_add_instrumentation_library_metrics();
  public:
  const ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics& instrumentation_library_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* add_instrumentation_library_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >&
      instrumentation_library_metrics() const;

  // string schema_url = 3;
  void clear_schema_url();
  const std::string& schema_url() const;
  void set_schema_url(const std::string& value);
  void set_schema_url(std::string&& value);
  void set_schema_url(const char* value);
  void set_schema_url(const char* value, size_t size);
  std::string* mutable_schema_url();
  std::string* release_schema_url();
  void set_allocated_schema_url(std::string* schema_url);
  private:
  const std::string& _internal_schema_url() const;
  void _internal_set_schema_url(const std::string& value);
  std::string* _internal_mutable_schema_url();
  public:

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::opentelemetry::proto::resource::v1::Resource& resource() const;
  ::opentelemetry::proto::resource::v1::Resource* release_resource();
  ::opentelemetry::proto::resource::v1::Resource* mutable_resource();
  void set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource);
  private:
  const ::opentelemetry::proto::resource::v1::Resource& _internal_resource() const;
  ::opentelemetry::proto::resource::v1::Resource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::opentelemetry::proto::resource::v1::Resource* resource);
  ::opentelemetry::proto::resource::v1::Resource* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ResourceMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics > instrumentation_library_metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_url_;
  ::opentelemetry::proto::resource::v1::Resource* resource_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class InstrumentationLibraryMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics) */ {
 public:
  inline InstrumentationLibraryMetrics() : InstrumentationLibraryMetrics(nullptr) {}
  virtual ~InstrumentationLibraryMetrics();

  InstrumentationLibraryMetrics(const InstrumentationLibraryMetrics& from);
  InstrumentationLibraryMetrics(InstrumentationLibraryMetrics&& from) noexcept
    : InstrumentationLibraryMetrics() {
    *this = ::std::move(from);
  }

  inline InstrumentationLibraryMetrics& operator=(const InstrumentationLibraryMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentationLibraryMetrics& operator=(InstrumentationLibraryMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentationLibraryMetrics& default_instance();

  static inline const InstrumentationLibraryMetrics* internal_default_instance() {
    return reinterpret_cast<const InstrumentationLibraryMetrics*>(
               &_InstrumentationLibraryMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InstrumentationLibraryMetrics& a, InstrumentationLibraryMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentationLibraryMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentationLibraryMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentationLibraryMetrics* New() const final {
    return CreateMaybeMessage<InstrumentationLibraryMetrics>(nullptr);
  }

  InstrumentationLibraryMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentationLibraryMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentationLibraryMetrics& from);
  void MergeFrom(const InstrumentationLibraryMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentationLibraryMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics";
  }
  protected:
  explicit InstrumentationLibraryMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 2,
    kSchemaUrlFieldNumber = 3,
    kInstrumentationLibraryFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::opentelemetry::proto::metrics::v1::Metric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric >*
      mutable_metrics();
  private:
  const ::opentelemetry::proto::metrics::v1::Metric& _internal_metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::Metric* _internal_add_metrics();
  public:
  const ::opentelemetry::proto::metrics::v1::Metric& metrics(int index) const;
  ::opentelemetry::proto::metrics::v1::Metric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric >&
      metrics() const;

  // string schema_url = 3;
  void clear_schema_url();
  const std::string& schema_url() const;
  void set_schema_url(const std::string& value);
  void set_schema_url(std::string&& value);
  void set_schema_url(const char* value);
  void set_schema_url(const char* value, size_t size);
  std::string* mutable_schema_url();
  std::string* release_schema_url();
  void set_allocated_schema_url(std::string* schema_url);
  private:
  const std::string& _internal_schema_url() const;
  void _internal_set_schema_url(const std::string& value);
  std::string* _internal_mutable_schema_url();
  public:

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  bool has_instrumentation_library() const;
  private:
  bool _internal_has_instrumentation_library() const;
  public:
  void clear_instrumentation_library();
  const ::opentelemetry::proto::common::v1::InstrumentationLibrary& instrumentation_library() const;
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* release_instrumentation_library();
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* mutable_instrumentation_library();
  void set_allocated_instrumentation_library(::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library);
  private:
  const ::opentelemetry::proto::common::v1::InstrumentationLibrary& _internal_instrumentation_library() const;
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* _internal_mutable_instrumentation_library();
  public:
  void unsafe_arena_set_allocated_instrumentation_library(
      ::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library);
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* unsafe_arena_release_instrumentation_library();

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric > metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_url_;
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Metric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Metric) */ {
 public:
  inline Metric() : Metric(nullptr) {}
  virtual ~Metric();

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metric& default_instance();

  enum DataCase {
    kIntGauge = 4,
    kGauge = 5,
    kIntSum = 6,
    kSum = 7,
    kIntHistogram = 8,
    kHistogram = 9,
    kExponentialHistogram = 10,
    kSummary = 11,
    DATA_NOT_SET = 0,
  };

  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }
  inline void Swap(Metric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.Metric";
  }
  protected:
  explicit Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kUnitFieldNumber = 3,
    kIntGaugeFieldNumber = 4,
    kGaugeFieldNumber = 5,
    kIntSumFieldNumber = 6,
    kSumFieldNumber = 7,
    kIntHistogramFieldNumber = 8,
    kHistogramFieldNumber = 9,
    kExponentialHistogramFieldNumber = 10,
    kSummaryFieldNumber = 11,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string unit = 3;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_int_gauge() const;
  private:
  bool _internal_has_int_gauge() const;
  public:
  PROTOBUF_DEPRECATED void clear_int_gauge();
  PROTOBUF_DEPRECATED const ::opentelemetry::proto::metrics::v1::IntGauge& int_gauge() const;
  PROTOBUF_DEPRECATED ::opentelemetry::proto::metrics::v1::IntGauge* release_int_gauge();
  PROTOBUF_DEPRECATED ::opentelemetry::proto::metrics::v1::IntGauge* mutable_int_gauge();
  PROTOBUF_DEPRECATED void set_allocated_int_gauge(::opentelemetry::proto::metrics::v1::IntGauge* int_gauge);
  private:
  const ::opentelemetry::proto::metrics::v1::IntGauge& _internal_int_gauge() const;
  ::opentelemetry::proto::metrics::v1::IntGauge* _internal_mutable_int_gauge();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_int_gauge(
      ::opentelemetry::proto::metrics::v1::IntGauge* int_gauge);
  PROTOBUF_DEPRECATED ::opentelemetry::proto::metrics::v1::IntGauge* unsafe_arena_release_int_gauge();

  // .opentelemetry.proto.metrics.v1.Gauge gauge = 5;
  bool has_gauge() const;
  private:
  bool _internal_has_gauge() const;
  public:
  void clear_gauge();
  const ::opentelemetry::proto::metrics::v1::Gauge& gauge() const;
  ::opentelemetry::proto::metrics::v1::Gauge* release_gauge();
  ::opentelemetry::proto::metrics::v1::Gauge* mutable_gauge();
  void set_allocated_gauge(::opentelemetry::proto::metrics::v1::Gauge* gauge);
  private:
  const ::opentelemetry::proto::metrics::v1::Gauge& _internal_gauge() const;
  ::opentelemetry::proto::metrics::v1::Gauge* _internal_mutable_gauge();
  public:
  void unsafe_arena_set_allocated_gauge(
      ::opentelemetry::proto::metrics::v1::Gauge* gauge);
  ::opentelemetry::proto::metrics::v1::Gauge* unsafe_arena_release_gauge();

  // .opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_int_sum() const;
  private:
  bool _internal_has_int_sum() const;
  public:
  PROTOBUF_DEPRECATED void clear_int_sum();
  PROTOBUF_DEPRECATED const ::opentelemetry::proto::metrics::v1::IntSum& int_sum() const;
  PROTOBUF_DEPRECATED ::opentelemetry::proto::metrics::v1::IntSum* release_int_sum();
  PROTOBUF_DEPRECATED ::opentelemetry::proto::metrics::v1::IntSum* mutable_int_sum();
  PROTOBUF_DEPRECATED void set_allocated_int_sum(::opentelemetry::proto::metrics::v1::IntSum* int_sum);
  private:
  const ::opentelemetry::proto::metrics::v1::IntSum& _internal_int_sum() const;
  ::opentelemetry::proto::metrics::v1::IntSum* _internal_mutable_int_sum();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_int_sum(
      ::opentelemetry::proto::metrics::v1::IntSum* int_sum);
  PROTOBUF_DEPRECATED ::opentelemetry::proto::metrics::v1::IntSum* unsafe_arena_release_int_sum();

  // .opentelemetry.proto.metrics.v1.Sum sum = 7;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  const ::opentelemetry::proto::metrics::v1::Sum& sum() const;
  ::opentelemetry::proto::metrics::v1::Sum* release_sum();
  ::opentelemetry::proto::metrics::v1::Sum* mutable_sum();
  void set_allocated_sum(::opentelemetry::proto::metrics::v1::Sum* sum);
  private:
  const ::opentelemetry::proto::metrics::v1::Sum& _internal_sum() const;
  ::opentelemetry::proto::metrics::v1::Sum* _internal_mutable_sum();
  public:
  void unsafe_arena_set_allocated_sum(
      ::opentelemetry::proto::metrics::v1::Sum* sum);
  ::opentelemetry::proto::metrics::v1::Sum* unsafe_arena_release_sum();

  // .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_int_histogram() const;
  private:
  bool _internal_has_int_histogram() const;
  public:
  PROTOBUF_DEPRECATED void clear_int_histogram();
  PROTOBUF_DEPRECATED const ::opentelemetry::proto::metrics::v1::IntHistogram& int_histogram() const;
  PROTOBUF_DEPRECATED ::opentelemetry::proto::metrics::v1::IntHistogram* release_int_histogram();
  PROTOBUF_DEPRECATED ::opentelemetry::proto::metrics::v1::IntHistogram* mutable_int_histogram();
  PROTOBUF_DEPRECATED void set_allocated_int_histogram(::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram);
  private:
  const ::opentelemetry::proto::metrics::v1::IntHistogram& _internal_int_histogram() const;
  ::opentelemetry::proto::metrics::v1::IntHistogram* _internal_mutable_int_histogram();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_int_histogram(
      ::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram);
  PROTOBUF_DEPRECATED ::opentelemetry::proto::metrics::v1::IntHistogram* unsafe_arena_release_int_histogram();

  // .opentelemetry.proto.metrics.v1.Histogram histogram = 9;
  bool has_histogram() const;
  private:
  bool _internal_has_histogram() const;
  public:
  void clear_histogram();
  const ::opentelemetry::proto::metrics::v1::Histogram& histogram() const;
  ::opentelemetry::proto::metrics::v1::Histogram* release_histogram();
  ::opentelemetry::proto::metrics::v1::Histogram* mutable_histogram();
  void set_allocated_histogram(::opentelemetry::proto::metrics::v1::Histogram* histogram);
  private:
  const ::opentelemetry::proto::metrics::v1::Histogram& _internal_histogram() const;
  ::opentelemetry::proto::metrics::v1::Histogram* _internal_mutable_histogram();
  public:
  void unsafe_arena_set_allocated_histogram(
      ::opentelemetry::proto::metrics::v1::Histogram* histogram);
  ::opentelemetry::proto::metrics::v1::Histogram* unsafe_arena_release_histogram();

  // .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;
  bool has_exponential_histogram() const;
  private:
  bool _internal_has_exponential_histogram() const;
  public:
  void clear_exponential_histogram();
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& exponential_histogram() const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogram* release_exponential_histogram();
  ::opentelemetry::proto::metrics::v1::ExponentialHistogram* mutable_exponential_histogram();
  void set_allocated_exponential_histogram(::opentelemetry::proto::metrics::v1::ExponentialHistogram* exponential_histogram);
  private:
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& _internal_exponential_histogram() const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogram* _internal_mutable_exponential_histogram();
  public:
  void unsafe_arena_set_allocated_exponential_histogram(
      ::opentelemetry::proto::metrics::v1::ExponentialHistogram* exponential_histogram);
  ::opentelemetry::proto::metrics::v1::ExponentialHistogram* unsafe_arena_release_exponential_histogram();

  // .opentelemetry.proto.metrics.v1.Summary summary = 11;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::opentelemetry::proto::metrics::v1::Summary& summary() const;
  ::opentelemetry::proto::metrics::v1::Summary* release_summary();
  ::opentelemetry::proto::metrics::v1::Summary* mutable_summary();
  void set_allocated_summary(::opentelemetry::proto::metrics::v1::Summary* summary);
  private:
  const ::opentelemetry::proto::metrics::v1::Summary& _internal_summary() const;
  ::opentelemetry::proto::metrics::v1::Summary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::opentelemetry::proto::metrics::v1::Summary* summary);
  ::opentelemetry::proto::metrics::v1::Summary* unsafe_arena_release_summary();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Metric)
 private:
  class _Internal;
  void set_has_int_gauge();
  void set_has_gauge();
  void set_has_int_sum();
  void set_has_sum();
  void set_has_int_histogram();
  void set_has_histogram();
  void set_has_exponential_histogram();
  void set_has_summary();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  union DataUnion {
    DataUnion() {}
    ::opentelemetry::proto::metrics::v1::IntGauge* int_gauge_;
    ::opentelemetry::proto::metrics::v1::Gauge* gauge_;
    ::opentelemetry::proto::metrics::v1::IntSum* int_sum_;
    ::opentelemetry::proto::metrics::v1::Sum* sum_;
    ::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram_;
    ::opentelemetry::proto::metrics::v1::Histogram* histogram_;
    ::opentelemetry::proto::metrics::v1::ExponentialHistogram* exponential_histogram_;
    ::opentelemetry::proto::metrics::v1::Summary* summary_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Gauge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Gauge) */ {
 public:
  inline Gauge() : Gauge(nullptr) {}
  virtual ~Gauge();

  Gauge(const Gauge& from);
  Gauge(Gauge&& from) noexcept
    : Gauge() {
    *this = ::std::move(from);
  }

  inline Gauge& operator=(const Gauge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gauge& operator=(Gauge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gauge& default_instance();

  static inline const Gauge* internal_default_instance() {
    return reinterpret_cast<const Gauge*>(
               &_Gauge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Gauge& a, Gauge& b) {
    a.Swap(&b);
  }
  inline void Swap(Gauge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gauge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gauge* New() const final {
    return CreateMaybeMessage<Gauge>(nullptr);
  }

  Gauge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gauge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gauge& from);
  void MergeFrom(const Gauge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gauge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.Gauge";
  }
  protected:
  explicit Gauge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::NumberDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::NumberDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint >&
      data_points() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Gauge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint > data_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Sum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Sum) */ {
 public:
  inline Sum() : Sum(nullptr) {}
  virtual ~Sum();

  Sum(const Sum& from);
  Sum(Sum&& from) noexcept
    : Sum() {
    *this = ::std::move(from);
  }

  inline Sum& operator=(const Sum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sum& operator=(Sum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sum& default_instance();

  static inline const Sum* internal_default_instance() {
    return reinterpret_cast<const Sum*>(
               &_Sum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Sum& a, Sum& b) {
    a.Swap(&b);
  }
  inline void Swap(Sum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sum* New() const final {
    return CreateMaybeMessage<Sum>(nullptr);
  }

  Sum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sum& from);
  void MergeFrom(const Sum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.Sum";
  }
  protected:
  explicit Sum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
    kIsMonotonicFieldNumber = 3,
  };
  // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::NumberDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::NumberDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::NumberDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint >&
      data_points() const;

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  public:

  // bool is_monotonic = 3;
  void clear_is_monotonic();
  bool is_monotonic() const;
  void set_is_monotonic(bool value);
  private:
  bool _internal_is_monotonic() const;
  void _internal_set_is_monotonic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Sum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint > data_points_;
  int aggregation_temporality_;
  bool is_monotonic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Histogram PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Histogram) */ {
 public:
  inline Histogram() : Histogram(nullptr) {}
  virtual ~Histogram();

  Histogram(const Histogram& from);
  Histogram(Histogram&& from) noexcept
    : Histogram() {
    *this = ::std::move(from);
  }

  inline Histogram& operator=(const Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline Histogram& operator=(Histogram&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Histogram& default_instance();

  static inline const Histogram* internal_default_instance() {
    return reinterpret_cast<const Histogram*>(
               &_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Histogram& a, Histogram& b) {
    a.Swap(&b);
  }
  inline void Swap(Histogram* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Histogram* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Histogram* New() const final {
    return CreateMaybeMessage<Histogram>(nullptr);
  }

  Histogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Histogram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Histogram& from);
  void MergeFrom(const Histogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Histogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.Histogram";
  }
  protected:
  explicit Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
  };
  // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::HistogramDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::HistogramDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::HistogramDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::HistogramDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::HistogramDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::HistogramDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::HistogramDataPoint >&
      data_points() const;

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Histogram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::HistogramDataPoint > data_points_;
  int aggregation_temporality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ExponentialHistogram PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ExponentialHistogram) */ {
 public:
  inline ExponentialHistogram() : ExponentialHistogram(nullptr) {}
  virtual ~ExponentialHistogram();

  ExponentialHistogram(const ExponentialHistogram& from);
  ExponentialHistogram(ExponentialHistogram&& from) noexcept
    : ExponentialHistogram() {
    *this = ::std::move(from);
  }

  inline ExponentialHistogram& operator=(const ExponentialHistogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExponentialHistogram& operator=(ExponentialHistogram&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExponentialHistogram& default_instance();

  static inline const ExponentialHistogram* internal_default_instance() {
    return reinterpret_cast<const ExponentialHistogram*>(
               &_ExponentialHistogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ExponentialHistogram& a, ExponentialHistogram& b) {
    a.Swap(&b);
  }
  inline void Swap(ExponentialHistogram* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExponentialHistogram* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExponentialHistogram* New() const final {
    return CreateMaybeMessage<ExponentialHistogram>(nullptr);
  }

  ExponentialHistogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExponentialHistogram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExponentialHistogram& from);
  void MergeFrom(const ExponentialHistogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExponentialHistogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.ExponentialHistogram";
  }
  protected:
  explicit ExponentialHistogram(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
  };
  // repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint >&
      data_points() const;

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ExponentialHistogram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint > data_points_;
  int aggregation_temporality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Summary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Summary) */ {
 public:
  inline Summary() : Summary(nullptr) {}
  virtual ~Summary();

  Summary(const Summary& from);
  Summary(Summary&& from) noexcept
    : Summary() {
    *this = ::std::move(from);
  }

  inline Summary& operator=(const Summary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary& operator=(Summary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary& default_instance();

  static inline const Summary* internal_default_instance() {
    return reinterpret_cast<const Summary*>(
               &_Summary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Summary& a, Summary& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary* New() const final {
    return CreateMaybeMessage<Summary>(nullptr);
  }

  Summary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary& from);
  void MergeFrom(const Summary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.Summary";
  }
  protected:
  explicit Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::SummaryDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::SummaryDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint >&
      data_points() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Summary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint > data_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class NumberDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.NumberDataPoint) */ {
 public:
  inline NumberDataPoint() : NumberDataPoint(nullptr) {}
  virtual ~NumberDataPoint();

  NumberDataPoint(const NumberDataPoint& from);
  NumberDataPoint(NumberDataPoint&& from) noexcept
    : NumberDataPoint() {
    *this = ::std::move(from);
  }

  inline NumberDataPoint& operator=(const NumberDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberDataPoint& operator=(NumberDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NumberDataPoint& default_instance();

  enum ValueCase {
    kAsDouble = 4,
    kAsInt = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const NumberDataPoint* internal_default_instance() {
    return reinterpret_cast<const NumberDataPoint*>(
               &_NumberDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NumberDataPoint& a, NumberDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NumberDataPoint* New() const final {
    return CreateMaybeMessage<NumberDataPoint>(nullptr);
  }

  NumberDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NumberDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NumberDataPoint& from);
  void MergeFrom(const NumberDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.NumberDataPoint";
  }
  protected:
  explicit NumberDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kExemplarsFieldNumber = 5,
    kAttributesFieldNumber = 7,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kFlagsFieldNumber = 8,
    kAsDoubleFieldNumber = 4,
    kAsIntFieldNumber = 6,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_labels();
  PROTOBUF_DEPRECATED ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  PROTOBUF_DEPRECATED const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  PROTOBUF_DEPRECATED ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::opentelemetry::proto::metrics::v1::Exemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >*
      mutable_exemplars();
  private:
  const ::opentelemetry::proto::metrics::v1::Exemplar& _internal_exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::Exemplar* _internal_add_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::Exemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::Exemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >&
      exemplars() const;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 flags = 8;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double as_double = 4;
  private:
  bool _internal_has_as_double() const;
  public:
  void clear_as_double();
  double as_double() const;
  void set_as_double(double value);
  private:
  double _internal_as_double() const;
  void _internal_set_as_double(double value);
  public:

  // sfixed64 as_int = 6;
  private:
  bool _internal_has_as_int() const;
  public:
  void clear_as_int();
  ::PROTOBUF_NAMESPACE_ID::int64 as_int() const;
  void set_as_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_as_int() const;
  void _internal_set_as_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.NumberDataPoint)
 private:
  class _Internal;
  void set_has_as_double();
  void set_has_as_int();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar > exemplars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  union ValueUnion {
    ValueUnion() {}
    double as_double_;
    ::PROTOBUF_NAMESPACE_ID::int64 as_int_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class HistogramDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.HistogramDataPoint) */ {
 public:
  inline HistogramDataPoint() : HistogramDataPoint(nullptr) {}
  virtual ~HistogramDataPoint();

  HistogramDataPoint(const HistogramDataPoint& from);
  HistogramDataPoint(HistogramDataPoint&& from) noexcept
    : HistogramDataPoint() {
    *this = ::std::move(from);
  }

  inline HistogramDataPoint& operator=(const HistogramDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramDataPoint& operator=(HistogramDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistogramDataPoint& default_instance();

  static inline const HistogramDataPoint* internal_default_instance() {
    return reinterpret_cast<const HistogramDataPoint*>(
               &_HistogramDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HistogramDataPoint& a, HistogramDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(HistogramDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistogramDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistogramDataPoint* New() const final {
    return CreateMaybeMessage<HistogramDataPoint>(nullptr);
  }

  HistogramDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistogramDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistogramDataPoint& from);
  void MergeFrom(const HistogramDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistogramDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.HistogramDataPoint";
  }
  protected:
  explicit HistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kBucketCountsFieldNumber = 6,
    kExplicitBoundsFieldNumber = 7,
    kExemplarsFieldNumber = 8,
    kAttributesFieldNumber = 9,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
    kFlagsFieldNumber = 10,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_labels();
  PROTOBUF_DEPRECATED ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  PROTOBUF_DEPRECATED const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  PROTOBUF_DEPRECATED ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated fixed64 bucket_counts = 6;
  int bucket_counts_size() const;
  private:
  int _internal_bucket_counts_size() const;
  public:
  void clear_bucket_counts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucket_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_bucket_counts() const;
  void _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_bucket_counts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 bucket_counts(int index) const;
  void set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      bucket_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_bucket_counts();

  // repeated double explicit_bounds = 7;
  int explicit_bounds_size() const;
  private:
  int _internal_explicit_bounds_size() const;
  public:
  void clear_explicit_bounds();
  private:
  double _internal_explicit_bounds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_explicit_bounds() const;
  void _internal_add_explicit_bounds(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_explicit_bounds();
  public:
  double explicit_bounds(int index) const;
  void set_explicit_bounds(int index, double value);
  void add_explicit_bounds(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      explicit_bounds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_explicit_bounds();

  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::opentelemetry::proto::metrics::v1::Exemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >*
      mutable_exemplars();
  private:
  const ::opentelemetry::proto::metrics::v1::Exemplar& _internal_exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::Exemplar* _internal_add_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::Exemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::Exemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >&
      exemplars() const;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double sum = 5;
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // uint32 flags = 10;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.HistogramDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > bucket_counts_;
  mutable std::atomic<int> _bucket_counts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > explicit_bounds_;
  mutable std::atomic<int> _explicit_bounds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar > exemplars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  double sum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ExponentialHistogramDataPoint_Buckets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets) */ {
 public:
  inline ExponentialHistogramDataPoint_Buckets() : ExponentialHistogramDataPoint_Buckets(nullptr) {}
  virtual ~ExponentialHistogramDataPoint_Buckets();

  ExponentialHistogramDataPoint_Buckets(const ExponentialHistogramDataPoint_Buckets& from);
  ExponentialHistogramDataPoint_Buckets(ExponentialHistogramDataPoint_Buckets&& from) noexcept
    : ExponentialHistogramDataPoint_Buckets() {
    *this = ::std::move(from);
  }

  inline ExponentialHistogramDataPoint_Buckets& operator=(const ExponentialHistogramDataPoint_Buckets& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExponentialHistogramDataPoint_Buckets& operator=(ExponentialHistogramDataPoint_Buckets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExponentialHistogramDataPoint_Buckets& default_instance();

  static inline const ExponentialHistogramDataPoint_Buckets* internal_default_instance() {
    return reinterpret_cast<const ExponentialHistogramDataPoint_Buckets*>(
               &_ExponentialHistogramDataPoint_Buckets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ExponentialHistogramDataPoint_Buckets& a, ExponentialHistogramDataPoint_Buckets& b) {
    a.Swap(&b);
  }
  inline void Swap(ExponentialHistogramDataPoint_Buckets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExponentialHistogramDataPoint_Buckets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExponentialHistogramDataPoint_Buckets* New() const final {
    return CreateMaybeMessage<ExponentialHistogramDataPoint_Buckets>(nullptr);
  }

  ExponentialHistogramDataPoint_Buckets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExponentialHistogramDataPoint_Buckets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExponentialHistogramDataPoint_Buckets& from);
  void MergeFrom(const ExponentialHistogramDataPoint_Buckets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExponentialHistogramDataPoint_Buckets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets";
  }
  protected:
  explicit ExponentialHistogramDataPoint_Buckets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketCountsFieldNumber = 2,
    kOffsetFieldNumber = 1,
  };
  // repeated uint64 bucket_counts = 2;
  int bucket_counts_size() const;
  private:
  int _internal_bucket_counts_size() const;
  public:
  void clear_bucket_counts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucket_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_bucket_counts() const;
  void _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_bucket_counts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 bucket_counts(int index) const;
  void set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      bucket_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_bucket_counts();

  // sint32 offset = 1;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > bucket_counts_;
  mutable std::atomic<int> _bucket_counts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class ExponentialHistogramDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint) */ {
 public:
  inline ExponentialHistogramDataPoint() : ExponentialHistogramDataPoint(nullptr) {}
  virtual ~ExponentialHistogramDataPoint();

  ExponentialHistogramDataPoint(const ExponentialHistogramDataPoint& from);
  ExponentialHistogramDataPoint(ExponentialHistogramDataPoint&& from) noexcept
    : ExponentialHistogramDataPoint() {
    *this = ::std::move(from);
  }

  inline ExponentialHistogramDataPoint& operator=(const ExponentialHistogramDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExponentialHistogramDataPoint& operator=(ExponentialHistogramDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExponentialHistogramDataPoint& default_instance();

  static inline const ExponentialHistogramDataPoint* internal_default_instance() {
    return reinterpret_cast<const ExponentialHistogramDataPoint*>(
               &_ExponentialHistogramDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ExponentialHistogramDataPoint& a, ExponentialHistogramDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ExponentialHistogramDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExponentialHistogramDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExponentialHistogramDataPoint* New() const final {
    return CreateMaybeMessage<ExponentialHistogramDataPoint>(nullptr);
  }

  ExponentialHistogramDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExponentialHistogramDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExponentialHistogramDataPoint& from);
  void MergeFrom(const ExponentialHistogramDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExponentialHistogramDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint";
  }
  protected:
  explicit ExponentialHistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ExponentialHistogramDataPoint_Buckets Buckets;

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
    kExemplarsFieldNumber = 11,
    kPositiveFieldNumber = 8,
    kNegativeFieldNumber = 9,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
    kZeroCountFieldNumber = 7,
    kScaleFieldNumber = 6,
    kFlagsFieldNumber = 10,
  };
  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;

  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::opentelemetry::proto::metrics::v1::Exemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >*
      mutable_exemplars();
  private:
  const ::opentelemetry::proto::metrics::v1::Exemplar& _internal_exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::Exemplar* _internal_add_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::Exemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::Exemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >&
      exemplars() const;

  // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
  bool has_positive() const;
  private:
  bool _internal_has_positive() const;
  public:
  void clear_positive();
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& positive() const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* release_positive();
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* mutable_positive();
  void set_allocated_positive(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* positive);
  private:
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& _internal_positive() const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* _internal_mutable_positive();
  public:
  void unsafe_arena_set_allocated_positive(
      ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* positive);
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* unsafe_arena_release_positive();

  // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
  bool has_negative() const;
  private:
  bool _internal_has_negative() const;
  public:
  void clear_negative();
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& negative() const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* release_negative();
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* mutable_negative();
  void set_allocated_negative(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* negative);
  private:
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& _internal_negative() const;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* _internal_mutable_negative();
  public:
  void unsafe_arena_set_allocated_negative(
      ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* negative);
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* unsafe_arena_release_negative();

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double sum = 5;
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // fixed64 zero_count = 7;
  void clear_zero_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 zero_count() const;
  void set_zero_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_zero_count() const;
  void _internal_set_zero_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 scale = 6;
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 flags = 10;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar > exemplars_;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* positive_;
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* negative_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  double sum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 zero_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryDataPoint_ValueAtQuantile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile) */ {
 public:
  inline SummaryDataPoint_ValueAtQuantile() : SummaryDataPoint_ValueAtQuantile(nullptr) {}
  virtual ~SummaryDataPoint_ValueAtQuantile();

  SummaryDataPoint_ValueAtQuantile(const SummaryDataPoint_ValueAtQuantile& from);
  SummaryDataPoint_ValueAtQuantile(SummaryDataPoint_ValueAtQuantile&& from) noexcept
    : SummaryDataPoint_ValueAtQuantile() {
    *this = ::std::move(from);
  }

  inline SummaryDataPoint_ValueAtQuantile& operator=(const SummaryDataPoint_ValueAtQuantile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryDataPoint_ValueAtQuantile& operator=(SummaryDataPoint_ValueAtQuantile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryDataPoint_ValueAtQuantile& default_instance();

  static inline const SummaryDataPoint_ValueAtQuantile* internal_default_instance() {
    return reinterpret_cast<const SummaryDataPoint_ValueAtQuantile*>(
               &_SummaryDataPoint_ValueAtQuantile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SummaryDataPoint_ValueAtQuantile& a, SummaryDataPoint_ValueAtQuantile& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryDataPoint_ValueAtQuantile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryDataPoint_ValueAtQuantile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryDataPoint_ValueAtQuantile* New() const final {
    return CreateMaybeMessage<SummaryDataPoint_ValueAtQuantile>(nullptr);
  }

  SummaryDataPoint_ValueAtQuantile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryDataPoint_ValueAtQuantile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryDataPoint_ValueAtQuantile& from);
  void MergeFrom(const SummaryDataPoint_ValueAtQuantile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryDataPoint_ValueAtQuantile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile";
  }
  protected:
  explicit SummaryDataPoint_ValueAtQuantile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantileFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // double quantile = 1;
  void clear_quantile();
  double quantile() const;
  void set_quantile(double value);
  private:
  double _internal_quantile() const;
  void _internal_set_quantile(double value);
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double quantile_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.SummaryDataPoint) */ {
 public:
  inline SummaryDataPoint() : SummaryDataPoint(nullptr) {}
  virtual ~SummaryDataPoint();

  SummaryDataPoint(const SummaryDataPoint& from);
  SummaryDataPoint(SummaryDataPoint&& from) noexcept
    : SummaryDataPoint() {
    *this = ::std::move(from);
  }

  inline SummaryDataPoint& operator=(const SummaryDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryDataPoint& operator=(SummaryDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SummaryDataPoint& default_instance();

  static inline const SummaryDataPoint* internal_default_instance() {
    return reinterpret_cast<const SummaryDataPoint*>(
               &_SummaryDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SummaryDataPoint& a, SummaryDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SummaryDataPoint* New() const final {
    return CreateMaybeMessage<SummaryDataPoint>(nullptr);
  }

  SummaryDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SummaryDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SummaryDataPoint& from);
  void MergeFrom(const SummaryDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.SummaryDataPoint";
  }
  protected:
  explicit SummaryDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SummaryDataPoint_ValueAtQuantile ValueAtQuantile;

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kQuantileValuesFieldNumber = 6,
    kAttributesFieldNumber = 7,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
    kFlagsFieldNumber = 8,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_labels();
  PROTOBUF_DEPRECATED ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  PROTOBUF_DEPRECATED const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  PROTOBUF_DEPRECATED ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
  int quantile_values_size() const;
  private:
  int _internal_quantile_values_size() const;
  public:
  void clear_quantile_values();
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* mutable_quantile_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile >*
      mutable_quantile_values();
  private:
  const ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile& _internal_quantile_values(int index) const;
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* _internal_add_quantile_values();
  public:
  const ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile& quantile_values(int index) const;
  ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* add_quantile_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile >&
      quantile_values() const;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      attributes() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double sum = 5;
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // uint32 flags = 8;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.SummaryDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile > quantile_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > attributes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  double sum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class Exemplar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.Exemplar) */ {
 public:
  inline Exemplar() : Exemplar(nullptr) {}
  virtual ~Exemplar();

  Exemplar(const Exemplar& from);
  Exemplar(Exemplar&& from) noexcept
    : Exemplar() {
    *this = ::std::move(from);
  }

  inline Exemplar& operator=(const Exemplar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exemplar& operator=(Exemplar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Exemplar& default_instance();

  enum ValueCase {
    kAsDouble = 3,
    kAsInt = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const Exemplar* internal_default_instance() {
    return reinterpret_cast<const Exemplar*>(
               &_Exemplar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Exemplar& a, Exemplar& b) {
    a.Swap(&b);
  }
  inline void Swap(Exemplar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Exemplar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Exemplar* New() const final {
    return CreateMaybeMessage<Exemplar>(nullptr);
  }

  Exemplar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Exemplar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Exemplar& from);
  void MergeFrom(const Exemplar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exemplar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.Exemplar";
  }
  protected:
  explicit Exemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilteredLabelsFieldNumber = 1,
    kFilteredAttributesFieldNumber = 7,
    kSpanIdFieldNumber = 4,
    kTraceIdFieldNumber = 5,
    kTimeUnixNanoFieldNumber = 2,
    kAsDoubleFieldNumber = 3,
    kAsIntFieldNumber = 6,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int filtered_labels_size() const;
  private:
  int _internal_filtered_labels_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_filtered_labels();
  PROTOBUF_DEPRECATED ::opentelemetry::proto::common::v1::StringKeyValue* mutable_filtered_labels(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_filtered_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_filtered_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_filtered_labels();
  public:
  PROTOBUF_DEPRECATED const ::opentelemetry::proto::common::v1::StringKeyValue& filtered_labels(int index) const;
  PROTOBUF_DEPRECATED ::opentelemetry::proto::common::v1::StringKeyValue* add_filtered_labels();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      filtered_labels() const;

  // repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
  int filtered_attributes_size() const;
  private:
  int _internal_filtered_attributes_size() const;
  public:
  void clear_filtered_attributes();
  ::opentelemetry::proto::common::v1::KeyValue* mutable_filtered_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
      mutable_filtered_attributes();
  private:
  const ::opentelemetry::proto::common::v1::KeyValue& _internal_filtered_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* _internal_add_filtered_attributes();
  public:
  const ::opentelemetry::proto::common::v1::KeyValue& filtered_attributes(int index) const;
  ::opentelemetry::proto::common::v1::KeyValue* add_filtered_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
      filtered_attributes() const;

  // bytes span_id = 4;
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const void* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // bytes trace_id = 5;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // fixed64 time_unix_nano = 2;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double as_double = 3;
  private:
  bool _internal_has_as_double() const;
  public:
  void clear_as_double();
  double as_double() const;
  void set_as_double(double value);
  private:
  double _internal_as_double() const;
  void _internal_set_as_double(double value);
  public:

  // sfixed64 as_int = 6;
  private:
  bool _internal_has_as_int() const;
  public:
  void clear_as_int();
  ::PROTOBUF_NAMESPACE_ID::int64 as_int() const;
  void set_as_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_as_int() const;
  void _internal_set_as_int(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.Exemplar)
 private:
  class _Internal;
  void set_has_as_double();
  void set_has_as_int();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > filtered_labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue > filtered_attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  union ValueUnion {
    ValueUnion() {}
    double as_double_;
    ::PROTOBUF_NAMESPACE_ID::int64 as_int_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntDataPoint) */ {
 public:
  inline IntDataPoint() : IntDataPoint(nullptr) {}
  virtual ~IntDataPoint();

  IntDataPoint(const IntDataPoint& from);
  IntDataPoint(IntDataPoint&& from) noexcept
    : IntDataPoint() {
    *this = ::std::move(from);
  }

  inline IntDataPoint& operator=(const IntDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntDataPoint& operator=(IntDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntDataPoint& default_instance();

  static inline const IntDataPoint* internal_default_instance() {
    return reinterpret_cast<const IntDataPoint*>(
               &_IntDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(IntDataPoint& a, IntDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(IntDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntDataPoint* New() const final {
    return CreateMaybeMessage<IntDataPoint>(nullptr);
  }

  IntDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntDataPoint& from);
  void MergeFrom(const IntDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntDataPoint";
  }
  protected:
  explicit IntDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kExemplarsFieldNumber = 5,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::opentelemetry::proto::metrics::v1::IntExemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >*
      mutable_exemplars();
  private:
  const ::opentelemetry::proto::metrics::v1::IntExemplar& _internal_exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::IntExemplar* _internal_add_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::IntExemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::IntExemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >&
      exemplars() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed64 value = 4;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar > exemplars_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntGauge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntGauge) */ {
 public:
  inline IntGauge() : IntGauge(nullptr) {}
  virtual ~IntGauge();

  IntGauge(const IntGauge& from);
  IntGauge(IntGauge&& from) noexcept
    : IntGauge() {
    *this = ::std::move(from);
  }

  inline IntGauge& operator=(const IntGauge& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntGauge& operator=(IntGauge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntGauge& default_instance();

  static inline const IntGauge* internal_default_instance() {
    return reinterpret_cast<const IntGauge*>(
               &_IntGauge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IntGauge& a, IntGauge& b) {
    a.Swap(&b);
  }
  inline void Swap(IntGauge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntGauge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntGauge* New() const final {
    return CreateMaybeMessage<IntGauge>(nullptr);
  }

  IntGauge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntGauge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntGauge& from);
  void MergeFrom(const IntGauge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntGauge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntGauge";
  }
  protected:
  explicit IntGauge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
  };
  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::IntDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::IntDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::IntDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >&
      data_points() const;

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntGauge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint > data_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntSum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntSum) */ {
 public:
  inline IntSum() : IntSum(nullptr) {}
  virtual ~IntSum();

  IntSum(const IntSum& from);
  IntSum(IntSum&& from) noexcept
    : IntSum() {
    *this = ::std::move(from);
  }

  inline IntSum& operator=(const IntSum& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntSum& operator=(IntSum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntSum& default_instance();

  static inline const IntSum* internal_default_instance() {
    return reinterpret_cast<const IntSum*>(
               &_IntSum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(IntSum& a, IntSum& b) {
    a.Swap(&b);
  }
  inline void Swap(IntSum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntSum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntSum* New() const final {
    return CreateMaybeMessage<IntSum>(nullptr);
  }

  IntSum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntSum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntSum& from);
  void MergeFrom(const IntSum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntSum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntSum";
  }
  protected:
  explicit IntSum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
    kIsMonotonicFieldNumber = 3,
  };
  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::IntDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::IntDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::IntDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >&
      data_points() const;

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  public:

  // bool is_monotonic = 3;
  void clear_is_monotonic();
  bool is_monotonic() const;
  void set_is_monotonic(bool value);
  private:
  bool _internal_is_monotonic() const;
  void _internal_set_is_monotonic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntSum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint > data_points_;
  int aggregation_temporality_;
  bool is_monotonic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntHistogramDataPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntHistogramDataPoint) */ {
 public:
  inline IntHistogramDataPoint() : IntHistogramDataPoint(nullptr) {}
  virtual ~IntHistogramDataPoint();

  IntHistogramDataPoint(const IntHistogramDataPoint& from);
  IntHistogramDataPoint(IntHistogramDataPoint&& from) noexcept
    : IntHistogramDataPoint() {
    *this = ::std::move(from);
  }

  inline IntHistogramDataPoint& operator=(const IntHistogramDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntHistogramDataPoint& operator=(IntHistogramDataPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntHistogramDataPoint& default_instance();

  static inline const IntHistogramDataPoint* internal_default_instance() {
    return reinterpret_cast<const IntHistogramDataPoint*>(
               &_IntHistogramDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(IntHistogramDataPoint& a, IntHistogramDataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(IntHistogramDataPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntHistogramDataPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntHistogramDataPoint* New() const final {
    return CreateMaybeMessage<IntHistogramDataPoint>(nullptr);
  }

  IntHistogramDataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntHistogramDataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntHistogramDataPoint& from);
  void MergeFrom(const IntHistogramDataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntHistogramDataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntHistogramDataPoint";
  }
  protected:
  explicit IntHistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kBucketCountsFieldNumber = 6,
    kExplicitBoundsFieldNumber = 7,
    kExemplarsFieldNumber = 8,
    kStartTimeUnixNanoFieldNumber = 2,
    kTimeUnixNanoFieldNumber = 3,
    kCountFieldNumber = 4,
    kSumFieldNumber = 5,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      labels() const;

  // repeated fixed64 bucket_counts = 6;
  int bucket_counts_size() const;
  private:
  int _internal_bucket_counts_size() const;
  public:
  void clear_bucket_counts();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bucket_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_bucket_counts() const;
  void _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_bucket_counts();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 bucket_counts(int index) const;
  void set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      bucket_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_bucket_counts();

  // repeated double explicit_bounds = 7;
  int explicit_bounds_size() const;
  private:
  int _internal_explicit_bounds_size() const;
  public:
  void clear_explicit_bounds();
  private:
  double _internal_explicit_bounds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_explicit_bounds() const;
  void _internal_add_explicit_bounds(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_explicit_bounds();
  public:
  double explicit_bounds(int index) const;
  void set_explicit_bounds(int index, double value);
  void add_explicit_bounds(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      explicit_bounds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_explicit_bounds();

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
  int exemplars_size() const;
  private:
  int _internal_exemplars_size() const;
  public:
  void clear_exemplars();
  ::opentelemetry::proto::metrics::v1::IntExemplar* mutable_exemplars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >*
      mutable_exemplars();
  private:
  const ::opentelemetry::proto::metrics::v1::IntExemplar& _internal_exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::IntExemplar* _internal_add_exemplars();
  public:
  const ::opentelemetry::proto::metrics::v1::IntExemplar& exemplars(int index) const;
  ::opentelemetry::proto::metrics::v1::IntExemplar* add_exemplars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >&
      exemplars() const;

  // fixed64 start_time_unix_nano = 2;
  void clear_start_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano() const;
  void set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time_unix_nano() const;
  void _internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 time_unix_nano = 3;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed64 sum = 5;
  void clear_sum();
  ::PROTOBUF_NAMESPACE_ID::int64 sum() const;
  void set_sum(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sum() const;
  void _internal_set_sum(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > bucket_counts_;
  mutable std::atomic<int> _bucket_counts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > explicit_bounds_;
  mutable std::atomic<int> _explicit_bounds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar > exemplars_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntHistogram PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntHistogram) */ {
 public:
  inline IntHistogram() : IntHistogram(nullptr) {}
  virtual ~IntHistogram();

  IntHistogram(const IntHistogram& from);
  IntHistogram(IntHistogram&& from) noexcept
    : IntHistogram() {
    *this = ::std::move(from);
  }

  inline IntHistogram& operator=(const IntHistogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntHistogram& operator=(IntHistogram&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntHistogram& default_instance();

  static inline const IntHistogram* internal_default_instance() {
    return reinterpret_cast<const IntHistogram*>(
               &_IntHistogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(IntHistogram& a, IntHistogram& b) {
    a.Swap(&b);
  }
  inline void Swap(IntHistogram* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntHistogram* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntHistogram* New() const final {
    return CreateMaybeMessage<IntHistogram>(nullptr);
  }

  IntHistogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntHistogram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntHistogram& from);
  void MergeFrom(const IntHistogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntHistogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntHistogram";
  }
  protected:
  explicit IntHistogram(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointsFieldNumber = 1,
    kAggregationTemporalityFieldNumber = 2,
  };
  // repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
  int data_points_size() const;
  private:
  int _internal_data_points_size() const;
  public:
  void clear_data_points();
  ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* mutable_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >*
      mutable_data_points();
  private:
  const ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint& _internal_data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* _internal_add_data_points();
  public:
  const ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint& data_points(int index) const;
  ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* add_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >&
      data_points() const;

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  void clear_aggregation_temporality();
  ::opentelemetry::proto::metrics::v1::AggregationTemporality aggregation_temporality() const;
  void set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  private:
  ::opentelemetry::proto::metrics::v1::AggregationTemporality _internal_aggregation_temporality() const;
  void _internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntHistogram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint > data_points_;
  int aggregation_temporality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// -------------------------------------------------------------------

class IntExemplar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opentelemetry.proto.metrics.v1.IntExemplar) */ {
 public:
  inline IntExemplar() : IntExemplar(nullptr) {}
  virtual ~IntExemplar();

  IntExemplar(const IntExemplar& from);
  IntExemplar(IntExemplar&& from) noexcept
    : IntExemplar() {
    *this = ::std::move(from);
  }

  inline IntExemplar& operator=(const IntExemplar& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntExemplar& operator=(IntExemplar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntExemplar& default_instance();

  static inline const IntExemplar* internal_default_instance() {
    return reinterpret_cast<const IntExemplar*>(
               &_IntExemplar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(IntExemplar& a, IntExemplar& b) {
    a.Swap(&b);
  }
  inline void Swap(IntExemplar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntExemplar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntExemplar* New() const final {
    return CreateMaybeMessage<IntExemplar>(nullptr);
  }

  IntExemplar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntExemplar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntExemplar& from);
  void MergeFrom(const IntExemplar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntExemplar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "opentelemetry.proto.metrics.v1.IntExemplar";
  }
  protected:
  explicit IntExemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
    return ::descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilteredLabelsFieldNumber = 1,
    kSpanIdFieldNumber = 4,
    kTraceIdFieldNumber = 5,
    kTimeUnixNanoFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
  int filtered_labels_size() const;
  private:
  int _internal_filtered_labels_size() const;
  public:
  void clear_filtered_labels();
  ::opentelemetry::proto::common::v1::StringKeyValue* mutable_filtered_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
      mutable_filtered_labels();
  private:
  const ::opentelemetry::proto::common::v1::StringKeyValue& _internal_filtered_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* _internal_add_filtered_labels();
  public:
  const ::opentelemetry::proto::common::v1::StringKeyValue& filtered_labels(int index) const;
  ::opentelemetry::proto::common::v1::StringKeyValue* add_filtered_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
      filtered_labels() const;

  // bytes span_id = 4;
  void clear_span_id();
  const std::string& span_id() const;
  void set_span_id(const std::string& value);
  void set_span_id(std::string&& value);
  void set_span_id(const char* value);
  void set_span_id(const void* value, size_t size);
  std::string* mutable_span_id();
  std::string* release_span_id();
  void set_allocated_span_id(std::string* span_id);
  private:
  const std::string& _internal_span_id() const;
  void _internal_set_span_id(const std::string& value);
  std::string* _internal_mutable_span_id();
  public:

  // bytes trace_id = 5;
  void clear_trace_id();
  const std::string& trace_id() const;
  void set_trace_id(const std::string& value);
  void set_trace_id(std::string&& value);
  void set_trace_id(const char* value);
  void set_trace_id(const void* value, size_t size);
  std::string* mutable_trace_id();
  std::string* release_trace_id();
  void set_allocated_trace_id(std::string* trace_id);
  private:
  const std::string& _internal_trace_id() const;
  void _internal_set_trace_id(const std::string& value);
  std::string* _internal_mutable_trace_id();
  public:

  // fixed64 time_unix_nano = 2;
  void clear_time_unix_nano();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano() const;
  void set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_unix_nano() const;
  void _internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.IntExemplar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue > filtered_labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr span_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_unix_nano_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetricsData

// repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
inline int MetricsData::_internal_resource_metrics_size() const {
  return resource_metrics_.size();
}
inline int MetricsData::resource_metrics_size() const {
  return _internal_resource_metrics_size();
}
inline void MetricsData::clear_resource_metrics() {
  resource_metrics_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::ResourceMetrics* MetricsData::mutable_resource_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  return resource_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics >*
MetricsData::mutable_resource_metrics() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  return &resource_metrics_;
}
inline const ::opentelemetry::proto::metrics::v1::ResourceMetrics& MetricsData::_internal_resource_metrics(int index) const {
  return resource_metrics_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::ResourceMetrics& MetricsData::resource_metrics(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  return _internal_resource_metrics(index);
}
inline ::opentelemetry::proto::metrics::v1::ResourceMetrics* MetricsData::_internal_add_resource_metrics() {
  return resource_metrics_.Add();
}
inline ::opentelemetry::proto::metrics::v1::ResourceMetrics* MetricsData::add_resource_metrics() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  return _internal_add_resource_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ResourceMetrics >&
MetricsData::resource_metrics() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.MetricsData.resource_metrics)
  return resource_metrics_;
}

// -------------------------------------------------------------------

// ResourceMetrics

// .opentelemetry.proto.resource.v1.Resource resource = 1;
inline bool ResourceMetrics::_internal_has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline bool ResourceMetrics::has_resource() const {
  return _internal_has_resource();
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceMetrics::_internal_resource() const {
  const ::opentelemetry::proto::resource::v1::Resource* p = resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::resource::v1::Resource&>(
      ::opentelemetry::proto::resource::v1::_Resource_default_instance_);
}
inline const ::opentelemetry::proto::resource::v1::Resource& ResourceMetrics::resource() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
  return _internal_resource();
}
inline void ResourceMetrics::unsafe_arena_set_allocated_resource(
    ::opentelemetry::proto::resource::v1::Resource* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::release_resource() {
  
  ::opentelemetry::proto::resource::v1::Resource* temp = resource_;
  resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
  
  ::opentelemetry::proto::resource::v1::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::_internal_mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::resource::v1::Resource>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::opentelemetry::proto::resource::v1::Resource* ResourceMetrics::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
  return _internal_mutable_resource();
}
inline void ResourceMetrics::set_allocated_resource(::opentelemetry::proto::resource::v1::Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource)->GetArena();
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ResourceMetrics.resource)
}

// repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
inline int ResourceMetrics::_internal_instrumentation_library_metrics_size() const {
  return instrumentation_library_metrics_.size();
}
inline int ResourceMetrics::instrumentation_library_metrics_size() const {
  return _internal_instrumentation_library_metrics_size();
}
inline void ResourceMetrics::clear_instrumentation_library_metrics() {
  instrumentation_library_metrics_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* ResourceMetrics::mutable_instrumentation_library_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return instrumentation_library_metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >*
ResourceMetrics::mutable_instrumentation_library_metrics() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return &instrumentation_library_metrics_;
}
inline const ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics& ResourceMetrics::_internal_instrumentation_library_metrics(int index) const {
  return instrumentation_library_metrics_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics& ResourceMetrics::instrumentation_library_metrics(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return _internal_instrumentation_library_metrics(index);
}
inline ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* ResourceMetrics::_internal_add_instrumentation_library_metrics() {
  return instrumentation_library_metrics_.Add();
}
inline ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* ResourceMetrics::add_instrumentation_library_metrics() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return _internal_add_instrumentation_library_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >&
ResourceMetrics::instrumentation_library_metrics() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ResourceMetrics.instrumentation_library_metrics)
  return instrumentation_library_metrics_;
}

// string schema_url = 3;
inline void ResourceMetrics::clear_schema_url() {
  schema_url_.ClearToEmpty();
}
inline const std::string& ResourceMetrics::schema_url() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
  return _internal_schema_url();
}
inline void ResourceMetrics::set_schema_url(const std::string& value) {
  _internal_set_schema_url(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
}
inline std::string* ResourceMetrics::mutable_schema_url() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
  return _internal_mutable_schema_url();
}
inline const std::string& ResourceMetrics::_internal_schema_url() const {
  return schema_url_.Get();
}
inline void ResourceMetrics::_internal_set_schema_url(const std::string& value) {
  
  schema_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceMetrics::set_schema_url(std::string&& value) {
  
  schema_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
}
inline void ResourceMetrics::set_schema_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
}
inline void ResourceMetrics::set_schema_url(const char* value,
    size_t size) {
  
  schema_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
}
inline std::string* ResourceMetrics::_internal_mutable_schema_url() {
  
  return schema_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceMetrics::release_schema_url() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
  return schema_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceMetrics::set_allocated_schema_url(std::string* schema_url) {
  if (schema_url != nullptr) {
    
  } else {
    
  }
  schema_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url)
}

// -------------------------------------------------------------------

// InstrumentationLibraryMetrics

// .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
inline bool InstrumentationLibraryMetrics::_internal_has_instrumentation_library() const {
  return this != internal_default_instance() && instrumentation_library_ != nullptr;
}
inline bool InstrumentationLibraryMetrics::has_instrumentation_library() const {
  return _internal_has_instrumentation_library();
}
inline const ::opentelemetry::proto::common::v1::InstrumentationLibrary& InstrumentationLibraryMetrics::_internal_instrumentation_library() const {
  const ::opentelemetry::proto::common::v1::InstrumentationLibrary* p = instrumentation_library_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::common::v1::InstrumentationLibrary&>(
      ::opentelemetry::proto::common::v1::_InstrumentationLibrary_default_instance_);
}
inline const ::opentelemetry::proto::common::v1::InstrumentationLibrary& InstrumentationLibraryMetrics::instrumentation_library() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
  return _internal_instrumentation_library();
}
inline void InstrumentationLibraryMetrics::unsafe_arena_set_allocated_instrumentation_library(
    ::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrumentation_library_);
  }
  instrumentation_library_ = instrumentation_library;
  if (instrumentation_library) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibraryMetrics::release_instrumentation_library() {
  
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* temp = instrumentation_library_;
  instrumentation_library_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibraryMetrics::unsafe_arena_release_instrumentation_library() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
  
  ::opentelemetry::proto::common::v1::InstrumentationLibrary* temp = instrumentation_library_;
  instrumentation_library_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibraryMetrics::_internal_mutable_instrumentation_library() {
  
  if (instrumentation_library_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::common::v1::InstrumentationLibrary>(GetArena());
    instrumentation_library_ = p;
  }
  return instrumentation_library_;
}
inline ::opentelemetry::proto::common::v1::InstrumentationLibrary* InstrumentationLibraryMetrics::mutable_instrumentation_library() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
  return _internal_mutable_instrumentation_library();
}
inline void InstrumentationLibraryMetrics::set_allocated_instrumentation_library(::opentelemetry::proto::common::v1::InstrumentationLibrary* instrumentation_library) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrumentation_library_);
  }
  if (instrumentation_library) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrumentation_library)->GetArena();
    if (message_arena != submessage_arena) {
      instrumentation_library = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instrumentation_library, submessage_arena);
    }
    
  } else {
    
  }
  instrumentation_library_ = instrumentation_library;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.instrumentation_library)
}

// repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
inline int InstrumentationLibraryMetrics::_internal_metrics_size() const {
  return metrics_.size();
}
inline int InstrumentationLibraryMetrics::metrics_size() const {
  return _internal_metrics_size();
}
inline void InstrumentationLibraryMetrics::clear_metrics() {
  metrics_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::Metric* InstrumentationLibraryMetrics::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric >*
InstrumentationLibraryMetrics::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return &metrics_;
}
inline const ::opentelemetry::proto::metrics::v1::Metric& InstrumentationLibraryMetrics::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::Metric& InstrumentationLibraryMetrics::metrics(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return _internal_metrics(index);
}
inline ::opentelemetry::proto::metrics::v1::Metric* InstrumentationLibraryMetrics::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::opentelemetry::proto::metrics::v1::Metric* InstrumentationLibraryMetrics::add_metrics() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Metric >&
InstrumentationLibraryMetrics::metrics() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.metrics)
  return metrics_;
}

// string schema_url = 3;
inline void InstrumentationLibraryMetrics::clear_schema_url() {
  schema_url_.ClearToEmpty();
}
inline const std::string& InstrumentationLibraryMetrics::schema_url() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url)
  return _internal_schema_url();
}
inline void InstrumentationLibraryMetrics::set_schema_url(const std::string& value) {
  _internal_set_schema_url(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url)
}
inline std::string* InstrumentationLibraryMetrics::mutable_schema_url() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url)
  return _internal_mutable_schema_url();
}
inline const std::string& InstrumentationLibraryMetrics::_internal_schema_url() const {
  return schema_url_.Get();
}
inline void InstrumentationLibraryMetrics::_internal_set_schema_url(const std::string& value) {
  
  schema_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InstrumentationLibraryMetrics::set_schema_url(std::string&& value) {
  
  schema_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url)
}
inline void InstrumentationLibraryMetrics::set_schema_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  schema_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url)
}
inline void InstrumentationLibraryMetrics::set_schema_url(const char* value,
    size_t size) {
  
  schema_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url)
}
inline std::string* InstrumentationLibraryMetrics::_internal_mutable_schema_url() {
  
  return schema_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InstrumentationLibraryMetrics::release_schema_url() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url)
  return schema_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentationLibraryMetrics::set_allocated_schema_url(std::string* schema_url) {
  if (schema_url != nullptr) {
    
  } else {
    
  }
  schema_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schema_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url)
}

// -------------------------------------------------------------------

// Metric

// string name = 1;
inline void Metric::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Metric::name() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.name)
  return _internal_name();
}
inline void Metric::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Metric.name)
}
inline std::string* Metric::mutable_name() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.name)
  return _internal_mutable_name();
}
inline const std::string& Metric::_internal_name() const {
  return name_.Get();
}
inline void Metric::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.Metric.name)
}
inline void Metric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.Metric.name)
}
inline void Metric::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.Metric.name)
}
inline std::string* Metric::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_name() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.name)
}

// string description = 2;
inline void Metric::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Metric::description() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.description)
  return _internal_description();
}
inline void Metric::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Metric.description)
}
inline std::string* Metric::mutable_description() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.description)
  return _internal_mutable_description();
}
inline const std::string& Metric::_internal_description() const {
  return description_.Get();
}
inline void Metric::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.Metric.description)
}
inline void Metric::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.Metric.description)
}
inline void Metric::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.Metric.description)
}
inline std::string* Metric::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_description() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.description)
}

// string unit = 3;
inline void Metric::clear_unit() {
  unit_.ClearToEmpty();
}
inline const std::string& Metric::unit() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.unit)
  return _internal_unit();
}
inline void Metric::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Metric.unit)
}
inline std::string* Metric::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.unit)
  return _internal_mutable_unit();
}
inline const std::string& Metric::_internal_unit() const {
  return unit_.Get();
}
inline void Metric::_internal_set_unit(const std::string& value) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Metric::set_unit(std::string&& value) {
  
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.Metric.unit)
}
inline void Metric::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.Metric.unit)
}
inline void Metric::set_unit(const char* value,
    size_t size) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.Metric.unit)
}
inline std::string* Metric::_internal_mutable_unit() {
  
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Metric::release_unit() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.unit)
  return unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Metric::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.unit)
}

// .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];
inline bool Metric::_internal_has_int_gauge() const {
  return data_case() == kIntGauge;
}
inline bool Metric::has_int_gauge() const {
  return _internal_has_int_gauge();
}
inline void Metric::set_has_int_gauge() {
  _oneof_case_[0] = kIntGauge;
}
inline void Metric::clear_int_gauge() {
  if (_internal_has_int_gauge()) {
    if (GetArena() == nullptr) {
      delete data_.int_gauge_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::IntGauge* Metric::release_int_gauge() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.int_gauge)
  if (_internal_has_int_gauge()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::IntGauge* temp = data_.int_gauge_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.int_gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::IntGauge& Metric::_internal_int_gauge() const {
  return _internal_has_int_gauge()
      ? *data_.int_gauge_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::IntGauge&>(::opentelemetry::proto::metrics::v1::_IntGauge_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::IntGauge& Metric::int_gauge() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.int_gauge)
  return _internal_int_gauge();
}
inline ::opentelemetry::proto::metrics::v1::IntGauge* Metric::unsafe_arena_release_int_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.int_gauge)
  if (_internal_has_int_gauge()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::IntGauge* temp = data_.int_gauge_;
    data_.int_gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_int_gauge(::opentelemetry::proto::metrics::v1::IntGauge* int_gauge) {
  clear_data();
  if (int_gauge) {
    set_has_int_gauge();
    data_.int_gauge_ = int_gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_gauge)
}
inline ::opentelemetry::proto::metrics::v1::IntGauge* Metric::_internal_mutable_int_gauge() {
  if (!_internal_has_int_gauge()) {
    clear_data();
    set_has_int_gauge();
    data_.int_gauge_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntGauge >(GetArena());
  }
  return data_.int_gauge_;
}
inline ::opentelemetry::proto::metrics::v1::IntGauge* Metric::mutable_int_gauge() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.int_gauge)
  return _internal_mutable_int_gauge();
}

// .opentelemetry.proto.metrics.v1.Gauge gauge = 5;
inline bool Metric::_internal_has_gauge() const {
  return data_case() == kGauge;
}
inline bool Metric::has_gauge() const {
  return _internal_has_gauge();
}
inline void Metric::set_has_gauge() {
  _oneof_case_[0] = kGauge;
}
inline void Metric::clear_gauge() {
  if (_internal_has_gauge()) {
    if (GetArena() == nullptr) {
      delete data_.gauge_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::Gauge* Metric::release_gauge() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.gauge)
  if (_internal_has_gauge()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::Gauge* temp = data_.gauge_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::Gauge& Metric::_internal_gauge() const {
  return _internal_has_gauge()
      ? *data_.gauge_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::Gauge&>(::opentelemetry::proto::metrics::v1::_Gauge_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::Gauge& Metric::gauge() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.gauge)
  return _internal_gauge();
}
inline ::opentelemetry::proto::metrics::v1::Gauge* Metric::unsafe_arena_release_gauge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.gauge)
  if (_internal_has_gauge()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::Gauge* temp = data_.gauge_;
    data_.gauge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_gauge(::opentelemetry::proto::metrics::v1::Gauge* gauge) {
  clear_data();
  if (gauge) {
    set_has_gauge();
    data_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.gauge)
}
inline ::opentelemetry::proto::metrics::v1::Gauge* Metric::_internal_mutable_gauge() {
  if (!_internal_has_gauge()) {
    clear_data();
    set_has_gauge();
    data_.gauge_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Gauge >(GetArena());
  }
  return data_.gauge_;
}
inline ::opentelemetry::proto::metrics::v1::Gauge* Metric::mutable_gauge() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.gauge)
  return _internal_mutable_gauge();
}

// .opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];
inline bool Metric::_internal_has_int_sum() const {
  return data_case() == kIntSum;
}
inline bool Metric::has_int_sum() const {
  return _internal_has_int_sum();
}
inline void Metric::set_has_int_sum() {
  _oneof_case_[0] = kIntSum;
}
inline void Metric::clear_int_sum() {
  if (_internal_has_int_sum()) {
    if (GetArena() == nullptr) {
      delete data_.int_sum_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::IntSum* Metric::release_int_sum() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.int_sum)
  if (_internal_has_int_sum()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::IntSum* temp = data_.int_sum_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.int_sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::IntSum& Metric::_internal_int_sum() const {
  return _internal_has_int_sum()
      ? *data_.int_sum_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::IntSum&>(::opentelemetry::proto::metrics::v1::_IntSum_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::IntSum& Metric::int_sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.int_sum)
  return _internal_int_sum();
}
inline ::opentelemetry::proto::metrics::v1::IntSum* Metric::unsafe_arena_release_int_sum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.int_sum)
  if (_internal_has_int_sum()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::IntSum* temp = data_.int_sum_;
    data_.int_sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_int_sum(::opentelemetry::proto::metrics::v1::IntSum* int_sum) {
  clear_data();
  if (int_sum) {
    set_has_int_sum();
    data_.int_sum_ = int_sum;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_sum)
}
inline ::opentelemetry::proto::metrics::v1::IntSum* Metric::_internal_mutable_int_sum() {
  if (!_internal_has_int_sum()) {
    clear_data();
    set_has_int_sum();
    data_.int_sum_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntSum >(GetArena());
  }
  return data_.int_sum_;
}
inline ::opentelemetry::proto::metrics::v1::IntSum* Metric::mutable_int_sum() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.int_sum)
  return _internal_mutable_int_sum();
}

// .opentelemetry.proto.metrics.v1.Sum sum = 7;
inline bool Metric::_internal_has_sum() const {
  return data_case() == kSum;
}
inline bool Metric::has_sum() const {
  return _internal_has_sum();
}
inline void Metric::set_has_sum() {
  _oneof_case_[0] = kSum;
}
inline void Metric::clear_sum() {
  if (_internal_has_sum()) {
    if (GetArena() == nullptr) {
      delete data_.sum_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::Sum* Metric::release_sum() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.sum)
  if (_internal_has_sum()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::Sum* temp = data_.sum_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::Sum& Metric::_internal_sum() const {
  return _internal_has_sum()
      ? *data_.sum_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::Sum&>(::opentelemetry::proto::metrics::v1::_Sum_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::Sum& Metric::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.sum)
  return _internal_sum();
}
inline ::opentelemetry::proto::metrics::v1::Sum* Metric::unsafe_arena_release_sum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.sum)
  if (_internal_has_sum()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::Sum* temp = data_.sum_;
    data_.sum_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_sum(::opentelemetry::proto::metrics::v1::Sum* sum) {
  clear_data();
  if (sum) {
    set_has_sum();
    data_.sum_ = sum;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.sum)
}
inline ::opentelemetry::proto::metrics::v1::Sum* Metric::_internal_mutable_sum() {
  if (!_internal_has_sum()) {
    clear_data();
    set_has_sum();
    data_.sum_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Sum >(GetArena());
  }
  return data_.sum_;
}
inline ::opentelemetry::proto::metrics::v1::Sum* Metric::mutable_sum() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.sum)
  return _internal_mutable_sum();
}

// .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];
inline bool Metric::_internal_has_int_histogram() const {
  return data_case() == kIntHistogram;
}
inline bool Metric::has_int_histogram() const {
  return _internal_has_int_histogram();
}
inline void Metric::set_has_int_histogram() {
  _oneof_case_[0] = kIntHistogram;
}
inline void Metric::clear_int_histogram() {
  if (_internal_has_int_histogram()) {
    if (GetArena() == nullptr) {
      delete data_.int_histogram_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::IntHistogram* Metric::release_int_histogram() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.int_histogram)
  if (_internal_has_int_histogram()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::IntHistogram* temp = data_.int_histogram_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.int_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::IntHistogram& Metric::_internal_int_histogram() const {
  return _internal_has_int_histogram()
      ? *data_.int_histogram_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::IntHistogram&>(::opentelemetry::proto::metrics::v1::_IntHistogram_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::IntHistogram& Metric::int_histogram() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.int_histogram)
  return _internal_int_histogram();
}
inline ::opentelemetry::proto::metrics::v1::IntHistogram* Metric::unsafe_arena_release_int_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.int_histogram)
  if (_internal_has_int_histogram()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::IntHistogram* temp = data_.int_histogram_;
    data_.int_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_int_histogram(::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram) {
  clear_data();
  if (int_histogram) {
    set_has_int_histogram();
    data_.int_histogram_ = int_histogram;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_histogram)
}
inline ::opentelemetry::proto::metrics::v1::IntHistogram* Metric::_internal_mutable_int_histogram() {
  if (!_internal_has_int_histogram()) {
    clear_data();
    set_has_int_histogram();
    data_.int_histogram_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntHistogram >(GetArena());
  }
  return data_.int_histogram_;
}
inline ::opentelemetry::proto::metrics::v1::IntHistogram* Metric::mutable_int_histogram() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.int_histogram)
  return _internal_mutable_int_histogram();
}

// .opentelemetry.proto.metrics.v1.Histogram histogram = 9;
inline bool Metric::_internal_has_histogram() const {
  return data_case() == kHistogram;
}
inline bool Metric::has_histogram() const {
  return _internal_has_histogram();
}
inline void Metric::set_has_histogram() {
  _oneof_case_[0] = kHistogram;
}
inline void Metric::clear_histogram() {
  if (_internal_has_histogram()) {
    if (GetArena() == nullptr) {
      delete data_.histogram_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::Histogram* Metric::release_histogram() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.histogram)
  if (_internal_has_histogram()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::Histogram* temp = data_.histogram_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::Histogram& Metric::_internal_histogram() const {
  return _internal_has_histogram()
      ? *data_.histogram_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::Histogram&>(::opentelemetry::proto::metrics::v1::_Histogram_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::Histogram& Metric::histogram() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.histogram)
  return _internal_histogram();
}
inline ::opentelemetry::proto::metrics::v1::Histogram* Metric::unsafe_arena_release_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.histogram)
  if (_internal_has_histogram()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::Histogram* temp = data_.histogram_;
    data_.histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_histogram(::opentelemetry::proto::metrics::v1::Histogram* histogram) {
  clear_data();
  if (histogram) {
    set_has_histogram();
    data_.histogram_ = histogram;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.histogram)
}
inline ::opentelemetry::proto::metrics::v1::Histogram* Metric::_internal_mutable_histogram() {
  if (!_internal_has_histogram()) {
    clear_data();
    set_has_histogram();
    data_.histogram_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Histogram >(GetArena());
  }
  return data_.histogram_;
}
inline ::opentelemetry::proto::metrics::v1::Histogram* Metric::mutable_histogram() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.histogram)
  return _internal_mutable_histogram();
}

// .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;
inline bool Metric::_internal_has_exponential_histogram() const {
  return data_case() == kExponentialHistogram;
}
inline bool Metric::has_exponential_histogram() const {
  return _internal_has_exponential_histogram();
}
inline void Metric::set_has_exponential_histogram() {
  _oneof_case_[0] = kExponentialHistogram;
}
inline void Metric::clear_exponential_histogram() {
  if (_internal_has_exponential_histogram()) {
    if (GetArena() == nullptr) {
      delete data_.exponential_histogram_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Metric::release_exponential_histogram() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
  if (_internal_has_exponential_histogram()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::ExponentialHistogram* temp = data_.exponential_histogram_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.exponential_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& Metric::_internal_exponential_histogram() const {
  return _internal_has_exponential_histogram()
      ? *data_.exponential_histogram_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::ExponentialHistogram&>(::opentelemetry::proto::metrics::v1::_ExponentialHistogram_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& Metric::exponential_histogram() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
  return _internal_exponential_histogram();
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Metric::unsafe_arena_release_exponential_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
  if (_internal_has_exponential_histogram()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::ExponentialHistogram* temp = data_.exponential_histogram_;
    data_.exponential_histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_exponential_histogram(::opentelemetry::proto::metrics::v1::ExponentialHistogram* exponential_histogram) {
  clear_data();
  if (exponential_histogram) {
    set_has_exponential_histogram();
    data_.exponential_histogram_ = exponential_histogram;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Metric::_internal_mutable_exponential_histogram() {
  if (!_internal_has_exponential_histogram()) {
    clear_data();
    set_has_exponential_histogram();
    data_.exponential_histogram_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::ExponentialHistogram >(GetArena());
  }
  return data_.exponential_histogram_;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Metric::mutable_exponential_histogram() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
  return _internal_mutable_exponential_histogram();
}

// .opentelemetry.proto.metrics.v1.Summary summary = 11;
inline bool Metric::_internal_has_summary() const {
  return data_case() == kSummary;
}
inline bool Metric::has_summary() const {
  return _internal_has_summary();
}
inline void Metric::set_has_summary() {
  _oneof_case_[0] = kSummary;
}
inline void Metric::clear_summary() {
  if (_internal_has_summary()) {
    if (GetArena() == nullptr) {
      delete data_.summary_;
    }
    clear_has_data();
  }
}
inline ::opentelemetry::proto::metrics::v1::Summary* Metric::release_summary() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Metric.summary)
  if (_internal_has_summary()) {
    clear_has_data();
      ::opentelemetry::proto::metrics::v1::Summary* temp = data_.summary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opentelemetry::proto::metrics::v1::Summary& Metric::_internal_summary() const {
  return _internal_has_summary()
      ? *data_.summary_
      : reinterpret_cast< ::opentelemetry::proto::metrics::v1::Summary&>(::opentelemetry::proto::metrics::v1::_Summary_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::Summary& Metric::summary() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Metric.summary)
  return _internal_summary();
}
inline ::opentelemetry::proto::metrics::v1::Summary* Metric::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opentelemetry.proto.metrics.v1.Metric.summary)
  if (_internal_has_summary()) {
    clear_has_data();
    ::opentelemetry::proto::metrics::v1::Summary* temp = data_.summary_;
    data_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Metric::unsafe_arena_set_allocated_summary(::opentelemetry::proto::metrics::v1::Summary* summary) {
  clear_data();
  if (summary) {
    set_has_summary();
    data_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.Metric.summary)
}
inline ::opentelemetry::proto::metrics::v1::Summary* Metric::_internal_mutable_summary() {
  if (!_internal_has_summary()) {
    clear_data();
    set_has_summary();
    data_.summary_ = CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Summary >(GetArena());
  }
  return data_.summary_;
}
inline ::opentelemetry::proto::metrics::v1::Summary* Metric::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Metric.summary)
  return _internal_mutable_summary();
}

inline bool Metric::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Metric::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Metric::DataCase Metric::data_case() const {
  return Metric::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Gauge

// repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
inline int Gauge::_internal_data_points_size() const {
  return data_points_.size();
}
inline int Gauge::data_points_size() const {
  return _internal_data_points_size();
}
inline void Gauge::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Gauge::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Gauge.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint >*
Gauge::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Gauge.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::NumberDataPoint& Gauge::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::NumberDataPoint& Gauge::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Gauge.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Gauge::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Gauge::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Gauge.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint >&
Gauge::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Gauge.data_points)
  return data_points_;
}

// -------------------------------------------------------------------

// Sum

// repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
inline int Sum::_internal_data_points_size() const {
  return data_points_.size();
}
inline int Sum::data_points_size() const {
  return _internal_data_points_size();
}
inline void Sum::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Sum::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Sum.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint >*
Sum::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Sum.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::NumberDataPoint& Sum::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::NumberDataPoint& Sum::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Sum.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Sum::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::NumberDataPoint* Sum::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Sum.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::NumberDataPoint >&
Sum::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Sum.data_points)
  return data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void Sum::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality Sum::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality Sum::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Sum.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void Sum::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void Sum::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Sum.aggregation_temporality)
}

// bool is_monotonic = 3;
inline void Sum::clear_is_monotonic() {
  is_monotonic_ = false;
}
inline bool Sum::_internal_is_monotonic() const {
  return is_monotonic_;
}
inline bool Sum::is_monotonic() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Sum.is_monotonic)
  return _internal_is_monotonic();
}
inline void Sum::_internal_set_is_monotonic(bool value) {
  
  is_monotonic_ = value;
}
inline void Sum::set_is_monotonic(bool value) {
  _internal_set_is_monotonic(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Sum.is_monotonic)
}

// -------------------------------------------------------------------

// Histogram

// repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
inline int Histogram::_internal_data_points_size() const {
  return data_points_.size();
}
inline int Histogram::data_points_size() const {
  return _internal_data_points_size();
}
inline void Histogram::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::HistogramDataPoint* Histogram::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Histogram.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::HistogramDataPoint >*
Histogram::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Histogram.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::HistogramDataPoint& Histogram::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::HistogramDataPoint& Histogram::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Histogram.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::HistogramDataPoint* Histogram::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::HistogramDataPoint* Histogram::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Histogram.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::HistogramDataPoint >&
Histogram::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Histogram.data_points)
  return data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void Histogram::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality Histogram::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality Histogram::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Histogram.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void Histogram::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void Histogram::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Histogram.aggregation_temporality)
}

// -------------------------------------------------------------------

// ExponentialHistogram

// repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
inline int ExponentialHistogram::_internal_data_points_size() const {
  return data_points_.size();
}
inline int ExponentialHistogram::data_points_size() const {
  return _internal_data_points_size();
}
inline void ExponentialHistogram::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* ExponentialHistogram::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint >*
ExponentialHistogram::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint& ExponentialHistogram::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint& ExponentialHistogram::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* ExponentialHistogram::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* ExponentialHistogram::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint >&
ExponentialHistogram::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ExponentialHistogram.data_points)
  return data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void ExponentialHistogram::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality ExponentialHistogram::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality ExponentialHistogram::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogram.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void ExponentialHistogram::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void ExponentialHistogram::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogram.aggregation_temporality)
}

// -------------------------------------------------------------------

// Summary

// repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
inline int Summary::_internal_data_points_size() const {
  return data_points_.size();
}
inline int Summary::data_points_size() const {
  return _internal_data_points_size();
}
inline void Summary::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint* Summary::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Summary.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint >*
Summary::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Summary.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::SummaryDataPoint& Summary::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::SummaryDataPoint& Summary::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Summary.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint* Summary::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint* Summary::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Summary.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint >&
Summary::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Summary.data_points)
  return data_points_;
}

// -------------------------------------------------------------------

// NumberDataPoint

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
inline int NumberDataPoint::_internal_attributes_size() const {
  return attributes_.size();
}
inline int NumberDataPoint::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* NumberDataPoint::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
NumberDataPoint::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  return &attributes_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& NumberDataPoint::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& NumberDataPoint::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* NumberDataPoint::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* NumberDataPoint::add_attributes() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
NumberDataPoint::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.NumberDataPoint.attributes)
  return attributes_;
}

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
inline int NumberDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int NumberDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* NumberDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.NumberDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
NumberDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.NumberDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& NumberDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& NumberDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* NumberDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* NumberDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.NumberDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
NumberDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.NumberDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void NumberDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void NumberDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void NumberDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void NumberDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NumberDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void NumberDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void NumberDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.time_unix_nano)
}

// double as_double = 4;
inline bool NumberDataPoint::_internal_has_as_double() const {
  return value_case() == kAsDouble;
}
inline void NumberDataPoint::set_has_as_double() {
  _oneof_case_[0] = kAsDouble;
}
inline void NumberDataPoint::clear_as_double() {
  if (_internal_has_as_double()) {
    value_.as_double_ = 0;
    clear_has_value();
  }
}
inline double NumberDataPoint::_internal_as_double() const {
  if (_internal_has_as_double()) {
    return value_.as_double_;
  }
  return 0;
}
inline void NumberDataPoint::_internal_set_as_double(double value) {
  if (!_internal_has_as_double()) {
    clear_value();
    set_has_as_double();
  }
  value_.as_double_ = value;
}
inline double NumberDataPoint::as_double() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.as_double)
  return _internal_as_double();
}
inline void NumberDataPoint::set_as_double(double value) {
  _internal_set_as_double(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.as_double)
}

// sfixed64 as_int = 6;
inline bool NumberDataPoint::_internal_has_as_int() const {
  return value_case() == kAsInt;
}
inline void NumberDataPoint::set_has_as_int() {
  _oneof_case_[0] = kAsInt;
}
inline void NumberDataPoint::clear_as_int() {
  if (_internal_has_as_int()) {
    value_.as_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NumberDataPoint::_internal_as_int() const {
  if (_internal_has_as_int()) {
    return value_.as_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void NumberDataPoint::_internal_set_as_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_as_int()) {
    clear_value();
    set_has_as_int();
  }
  value_.as_int_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NumberDataPoint::as_int() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.as_int)
  return _internal_as_int();
}
inline void NumberDataPoint::set_as_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_as_int(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.as_int)
}

// repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
inline int NumberDataPoint::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int NumberDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void NumberDataPoint::clear_exemplars() {
  exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* NumberDataPoint::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >*
NumberDataPoint::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  return &exemplars_;
}
inline const ::opentelemetry::proto::metrics::v1::Exemplar& NumberDataPoint::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::Exemplar& NumberDataPoint::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  return _internal_exemplars(index);
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* NumberDataPoint::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* NumberDataPoint::add_exemplars() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  return _internal_add_exemplars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >&
NumberDataPoint::exemplars() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars)
  return exemplars_;
}

// uint32 flags = 8;
inline void NumberDataPoint::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NumberDataPoint::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NumberDataPoint::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.NumberDataPoint.flags)
  return _internal_flags();
}
inline void NumberDataPoint::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void NumberDataPoint::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.NumberDataPoint.flags)
}

inline bool NumberDataPoint::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void NumberDataPoint::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline NumberDataPoint::ValueCase NumberDataPoint::value_case() const {
  return NumberDataPoint::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HistogramDataPoint

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
inline int HistogramDataPoint::_internal_attributes_size() const {
  return attributes_.size();
}
inline int HistogramDataPoint::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* HistogramDataPoint::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
HistogramDataPoint::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  return &attributes_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& HistogramDataPoint::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& HistogramDataPoint::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* HistogramDataPoint::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* HistogramDataPoint::add_attributes() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
HistogramDataPoint::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes)
  return attributes_;
}

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
inline int HistogramDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int HistogramDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* HistogramDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.HistogramDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
HistogramDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& HistogramDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& HistogramDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* HistogramDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* HistogramDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.HistogramDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
HistogramDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void HistogramDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void HistogramDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void HistogramDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void HistogramDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void HistogramDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void HistogramDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.time_unix_nano)
}

// fixed64 count = 4;
inline void HistogramDataPoint::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramDataPoint::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.count)
  return _internal_count();
}
inline void HistogramDataPoint::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void HistogramDataPoint::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.count)
}

// double sum = 5;
inline void HistogramDataPoint::clear_sum() {
  sum_ = 0;
}
inline double HistogramDataPoint::_internal_sum() const {
  return sum_;
}
inline double HistogramDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.sum)
  return _internal_sum();
}
inline void HistogramDataPoint::_internal_set_sum(double value) {
  
  sum_ = value;
}
inline void HistogramDataPoint::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.sum)
}

// repeated fixed64 bucket_counts = 6;
inline int HistogramDataPoint::_internal_bucket_counts_size() const {
  return bucket_counts_.size();
}
inline int HistogramDataPoint::bucket_counts_size() const {
  return _internal_bucket_counts_size();
}
inline void HistogramDataPoint::clear_bucket_counts() {
  bucket_counts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramDataPoint::_internal_bucket_counts(int index) const {
  return bucket_counts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistogramDataPoint::bucket_counts(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
  return _internal_bucket_counts(index);
}
inline void HistogramDataPoint::set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
}
inline void HistogramDataPoint::_internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Add(value);
}
inline void HistogramDataPoint::add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_bucket_counts(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
HistogramDataPoint::_internal_bucket_counts() const {
  return bucket_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
HistogramDataPoint::bucket_counts() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
  return _internal_bucket_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
HistogramDataPoint::_internal_mutable_bucket_counts() {
  return &bucket_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
HistogramDataPoint::mutable_bucket_counts() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.bucket_counts)
  return _internal_mutable_bucket_counts();
}

// repeated double explicit_bounds = 7;
inline int HistogramDataPoint::_internal_explicit_bounds_size() const {
  return explicit_bounds_.size();
}
inline int HistogramDataPoint::explicit_bounds_size() const {
  return _internal_explicit_bounds_size();
}
inline void HistogramDataPoint::clear_explicit_bounds() {
  explicit_bounds_.Clear();
}
inline double HistogramDataPoint::_internal_explicit_bounds(int index) const {
  return explicit_bounds_.Get(index);
}
inline double HistogramDataPoint::explicit_bounds(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds(index);
}
inline void HistogramDataPoint::set_explicit_bounds(int index, double value) {
  explicit_bounds_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
}
inline void HistogramDataPoint::_internal_add_explicit_bounds(double value) {
  explicit_bounds_.Add(value);
}
inline void HistogramDataPoint::add_explicit_bounds(double value) {
  _internal_add_explicit_bounds(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistogramDataPoint::_internal_explicit_bounds() const {
  return explicit_bounds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
HistogramDataPoint::explicit_bounds() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistogramDataPoint::_internal_mutable_explicit_bounds() {
  return &explicit_bounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
HistogramDataPoint::mutable_explicit_bounds() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.explicit_bounds)
  return _internal_mutable_explicit_bounds();
}

// repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
inline int HistogramDataPoint::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int HistogramDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void HistogramDataPoint::clear_exemplars() {
  exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* HistogramDataPoint::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >*
HistogramDataPoint::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  return &exemplars_;
}
inline const ::opentelemetry::proto::metrics::v1::Exemplar& HistogramDataPoint::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::Exemplar& HistogramDataPoint::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  return _internal_exemplars(index);
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* HistogramDataPoint::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* HistogramDataPoint::add_exemplars() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  return _internal_add_exemplars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >&
HistogramDataPoint::exemplars() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars)
  return exemplars_;
}

// uint32 flags = 10;
inline void HistogramDataPoint::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistogramDataPoint::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistogramDataPoint::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.HistogramDataPoint.flags)
  return _internal_flags();
}
inline void HistogramDataPoint::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void HistogramDataPoint::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.HistogramDataPoint.flags)
}

// -------------------------------------------------------------------

// ExponentialHistogramDataPoint_Buckets

// sint32 offset = 1;
inline void ExponentialHistogramDataPoint_Buckets::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExponentialHistogramDataPoint_Buckets::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExponentialHistogramDataPoint_Buckets::offset() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.offset)
  return _internal_offset();
}
inline void ExponentialHistogramDataPoint_Buckets::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void ExponentialHistogramDataPoint_Buckets::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.offset)
}

// repeated uint64 bucket_counts = 2;
inline int ExponentialHistogramDataPoint_Buckets::_internal_bucket_counts_size() const {
  return bucket_counts_.size();
}
inline int ExponentialHistogramDataPoint_Buckets::bucket_counts_size() const {
  return _internal_bucket_counts_size();
}
inline void ExponentialHistogramDataPoint_Buckets::clear_bucket_counts() {
  bucket_counts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint_Buckets::_internal_bucket_counts(int index) const {
  return bucket_counts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint_Buckets::bucket_counts(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
  return _internal_bucket_counts(index);
}
inline void ExponentialHistogramDataPoint_Buckets::set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
}
inline void ExponentialHistogramDataPoint_Buckets::_internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Add(value);
}
inline void ExponentialHistogramDataPoint_Buckets::add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_bucket_counts(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ExponentialHistogramDataPoint_Buckets::_internal_bucket_counts() const {
  return bucket_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ExponentialHistogramDataPoint_Buckets::bucket_counts() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
  return _internal_bucket_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ExponentialHistogramDataPoint_Buckets::_internal_mutable_bucket_counts() {
  return &bucket_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ExponentialHistogramDataPoint_Buckets::mutable_bucket_counts() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucket_counts)
  return _internal_mutable_bucket_counts();
}

// -------------------------------------------------------------------

// ExponentialHistogramDataPoint

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
inline int ExponentialHistogramDataPoint::_internal_attributes_size() const {
  return attributes_.size();
}
inline int ExponentialHistogramDataPoint::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* ExponentialHistogramDataPoint::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
ExponentialHistogramDataPoint::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  return &attributes_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& ExponentialHistogramDataPoint::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& ExponentialHistogramDataPoint::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* ExponentialHistogramDataPoint::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* ExponentialHistogramDataPoint::add_attributes() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
ExponentialHistogramDataPoint::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes)
  return attributes_;
}

// fixed64 start_time_unix_nano = 2;
inline void ExponentialHistogramDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void ExponentialHistogramDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void ExponentialHistogramDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void ExponentialHistogramDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void ExponentialHistogramDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void ExponentialHistogramDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.time_unix_nano)
}

// fixed64 count = 4;
inline void ExponentialHistogramDataPoint::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.count)
  return _internal_count();
}
inline void ExponentialHistogramDataPoint::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void ExponentialHistogramDataPoint::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.count)
}

// double sum = 5;
inline void ExponentialHistogramDataPoint::clear_sum() {
  sum_ = 0;
}
inline double ExponentialHistogramDataPoint::_internal_sum() const {
  return sum_;
}
inline double ExponentialHistogramDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.sum)
  return _internal_sum();
}
inline void ExponentialHistogramDataPoint::_internal_set_sum(double value) {
  
  sum_ = value;
}
inline void ExponentialHistogramDataPoint::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.sum)
}

// sint32 scale = 6;
inline void ExponentialHistogramDataPoint::clear_scale() {
  scale_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExponentialHistogramDataPoint::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExponentialHistogramDataPoint::scale() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.scale)
  return _internal_scale();
}
inline void ExponentialHistogramDataPoint::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scale_ = value;
}
inline void ExponentialHistogramDataPoint::set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.scale)
}

// fixed64 zero_count = 7;
inline void ExponentialHistogramDataPoint::clear_zero_count() {
  zero_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint::_internal_zero_count() const {
  return zero_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ExponentialHistogramDataPoint::zero_count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.zero_count)
  return _internal_zero_count();
}
inline void ExponentialHistogramDataPoint::_internal_set_zero_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  zero_count_ = value;
}
inline void ExponentialHistogramDataPoint::set_zero_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_zero_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.zero_count)
}

// .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
inline bool ExponentialHistogramDataPoint::_internal_has_positive() const {
  return this != internal_default_instance() && positive_ != nullptr;
}
inline bool ExponentialHistogramDataPoint::has_positive() const {
  return _internal_has_positive();
}
inline void ExponentialHistogramDataPoint::clear_positive() {
  if (GetArena() == nullptr && positive_ != nullptr) {
    delete positive_;
  }
  positive_ = nullptr;
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& ExponentialHistogramDataPoint::_internal_positive() const {
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* p = positive_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets&>(
      ::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_Buckets_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& ExponentialHistogramDataPoint::positive() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
  return _internal_positive();
}
inline void ExponentialHistogramDataPoint::unsafe_arena_set_allocated_positive(
    ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* positive) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positive_);
  }
  positive_ = positive;
  if (positive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::release_positive() {
  
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* temp = positive_;
  positive_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::unsafe_arena_release_positive() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
  
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* temp = positive_;
  positive_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::_internal_mutable_positive() {
  
  if (positive_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(GetArena());
    positive_ = p;
  }
  return positive_;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::mutable_positive() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
  return _internal_mutable_positive();
}
inline void ExponentialHistogramDataPoint::set_allocated_positive(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* positive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete positive_;
  }
  if (positive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(positive);
    if (message_arena != submessage_arena) {
      positive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positive, submessage_arena);
    }
    
  } else {
    
  }
  positive_ = positive;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive)
}

// .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
inline bool ExponentialHistogramDataPoint::_internal_has_negative() const {
  return this != internal_default_instance() && negative_ != nullptr;
}
inline bool ExponentialHistogramDataPoint::has_negative() const {
  return _internal_has_negative();
}
inline void ExponentialHistogramDataPoint::clear_negative() {
  if (GetArena() == nullptr && negative_ != nullptr) {
    delete negative_;
  }
  negative_ = nullptr;
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& ExponentialHistogramDataPoint::_internal_negative() const {
  const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* p = negative_;
  return p != nullptr ? *p : reinterpret_cast<const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets&>(
      ::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_Buckets_default_instance_);
}
inline const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& ExponentialHistogramDataPoint::negative() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
  return _internal_negative();
}
inline void ExponentialHistogramDataPoint::unsafe_arena_set_allocated_negative(
    ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* negative) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(negative_);
  }
  negative_ = negative;
  if (negative) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::release_negative() {
  
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* temp = negative_;
  negative_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::unsafe_arena_release_negative() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
  
  ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* temp = negative_;
  negative_ = nullptr;
  return temp;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::_internal_mutable_negative() {
  
  if (negative_ == nullptr) {
    auto* p = CreateMaybeMessage<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(GetArena());
    negative_ = p;
  }
  return negative_;
}
inline ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* ExponentialHistogramDataPoint::mutable_negative() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
  return _internal_mutable_negative();
}
inline void ExponentialHistogramDataPoint::set_allocated_negative(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* negative) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete negative_;
  }
  if (negative) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(negative);
    if (message_arena != submessage_arena) {
      negative = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, negative, submessage_arena);
    }
    
  } else {
    
  }
  negative_ = negative;
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative)
}

// uint32 flags = 10;
inline void ExponentialHistogramDataPoint::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExponentialHistogramDataPoint::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExponentialHistogramDataPoint::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.flags)
  return _internal_flags();
}
inline void ExponentialHistogramDataPoint::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void ExponentialHistogramDataPoint::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.flags)
}

// repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
inline int ExponentialHistogramDataPoint::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int ExponentialHistogramDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void ExponentialHistogramDataPoint::clear_exemplars() {
  exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* ExponentialHistogramDataPoint::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >*
ExponentialHistogramDataPoint::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  return &exemplars_;
}
inline const ::opentelemetry::proto::metrics::v1::Exemplar& ExponentialHistogramDataPoint::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::Exemplar& ExponentialHistogramDataPoint::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  return _internal_exemplars(index);
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* ExponentialHistogramDataPoint::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::opentelemetry::proto::metrics::v1::Exemplar* ExponentialHistogramDataPoint::add_exemplars() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  return _internal_add_exemplars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::Exemplar >&
ExponentialHistogramDataPoint::exemplars() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars)
  return exemplars_;
}

// -------------------------------------------------------------------

// SummaryDataPoint_ValueAtQuantile

// double quantile = 1;
inline void SummaryDataPoint_ValueAtQuantile::clear_quantile() {
  quantile_ = 0;
}
inline double SummaryDataPoint_ValueAtQuantile::_internal_quantile() const {
  return quantile_;
}
inline double SummaryDataPoint_ValueAtQuantile::quantile() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.quantile)
  return _internal_quantile();
}
inline void SummaryDataPoint_ValueAtQuantile::_internal_set_quantile(double value) {
  
  quantile_ = value;
}
inline void SummaryDataPoint_ValueAtQuantile::set_quantile(double value) {
  _internal_set_quantile(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.quantile)
}

// double value = 2;
inline void SummaryDataPoint_ValueAtQuantile::clear_value() {
  value_ = 0;
}
inline double SummaryDataPoint_ValueAtQuantile::_internal_value() const {
  return value_;
}
inline double SummaryDataPoint_ValueAtQuantile::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.value)
  return _internal_value();
}
inline void SummaryDataPoint_ValueAtQuantile::_internal_set_value(double value) {
  
  value_ = value;
}
inline void SummaryDataPoint_ValueAtQuantile::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.value)
}

// -------------------------------------------------------------------

// SummaryDataPoint

// repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
inline int SummaryDataPoint::_internal_attributes_size() const {
  return attributes_.size();
}
inline int SummaryDataPoint::attributes_size() const {
  return _internal_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* SummaryDataPoint::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  return attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
SummaryDataPoint::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  return &attributes_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& SummaryDataPoint::_internal_attributes(int index) const {
  return attributes_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& SummaryDataPoint::attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  return _internal_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* SummaryDataPoint::_internal_add_attributes() {
  return attributes_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* SummaryDataPoint::add_attributes() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  return _internal_add_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
SummaryDataPoint::attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes)
  return attributes_;
}

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
inline int SummaryDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int SummaryDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* SummaryDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.SummaryDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
SummaryDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& SummaryDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& SummaryDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* SummaryDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* SummaryDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.SummaryDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
SummaryDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void SummaryDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void SummaryDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void SummaryDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void SummaryDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void SummaryDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void SummaryDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.time_unix_nano)
}

// fixed64 count = 4;
inline void SummaryDataPoint::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryDataPoint::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SummaryDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.count)
  return _internal_count();
}
inline void SummaryDataPoint::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void SummaryDataPoint::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.count)
}

// double sum = 5;
inline void SummaryDataPoint::clear_sum() {
  sum_ = 0;
}
inline double SummaryDataPoint::_internal_sum() const {
  return sum_;
}
inline double SummaryDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.sum)
  return _internal_sum();
}
inline void SummaryDataPoint::_internal_set_sum(double value) {
  
  sum_ = value;
}
inline void SummaryDataPoint::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.sum)
}

// repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
inline int SummaryDataPoint::_internal_quantile_values_size() const {
  return quantile_values_.size();
}
inline int SummaryDataPoint::quantile_values_size() const {
  return _internal_quantile_values_size();
}
inline void SummaryDataPoint::clear_quantile_values() {
  quantile_values_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* SummaryDataPoint::mutable_quantile_values(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  return quantile_values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile >*
SummaryDataPoint::mutable_quantile_values() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  return &quantile_values_;
}
inline const ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile& SummaryDataPoint::_internal_quantile_values(int index) const {
  return quantile_values_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile& SummaryDataPoint::quantile_values(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  return _internal_quantile_values(index);
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* SummaryDataPoint::_internal_add_quantile_values() {
  return quantile_values_.Add();
}
inline ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* SummaryDataPoint::add_quantile_values() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  return _internal_add_quantile_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile >&
SummaryDataPoint::quantile_values() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.SummaryDataPoint.quantile_values)
  return quantile_values_;
}

// uint32 flags = 8;
inline void SummaryDataPoint::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryDataPoint::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SummaryDataPoint::flags() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.SummaryDataPoint.flags)
  return _internal_flags();
}
inline void SummaryDataPoint::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void SummaryDataPoint::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.SummaryDataPoint.flags)
}

// -------------------------------------------------------------------

// Exemplar

// repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
inline int Exemplar::_internal_filtered_attributes_size() const {
  return filtered_attributes_.size();
}
inline int Exemplar::filtered_attributes_size() const {
  return _internal_filtered_attributes_size();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Exemplar::mutable_filtered_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  return filtered_attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >*
Exemplar::mutable_filtered_attributes() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  return &filtered_attributes_;
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Exemplar::_internal_filtered_attributes(int index) const {
  return filtered_attributes_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::KeyValue& Exemplar::filtered_attributes(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  return _internal_filtered_attributes(index);
}
inline ::opentelemetry::proto::common::v1::KeyValue* Exemplar::_internal_add_filtered_attributes() {
  return filtered_attributes_.Add();
}
inline ::opentelemetry::proto::common::v1::KeyValue* Exemplar::add_filtered_attributes() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  return _internal_add_filtered_attributes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::KeyValue >&
Exemplar::filtered_attributes() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Exemplar.filtered_attributes)
  return filtered_attributes_;
}

// repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];
inline int Exemplar::_internal_filtered_labels_size() const {
  return filtered_labels_.size();
}
inline int Exemplar::filtered_labels_size() const {
  return _internal_filtered_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* Exemplar::mutable_filtered_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Exemplar.filtered_labels)
  return filtered_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
Exemplar::mutable_filtered_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.Exemplar.filtered_labels)
  return &filtered_labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& Exemplar::_internal_filtered_labels(int index) const {
  return filtered_labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& Exemplar::filtered_labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.filtered_labels)
  return _internal_filtered_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* Exemplar::_internal_add_filtered_labels() {
  return filtered_labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* Exemplar::add_filtered_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.Exemplar.filtered_labels)
  return _internal_add_filtered_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
Exemplar::filtered_labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.Exemplar.filtered_labels)
  return filtered_labels_;
}

// fixed64 time_unix_nano = 2;
inline void Exemplar::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Exemplar::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Exemplar::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void Exemplar::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void Exemplar::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.time_unix_nano)
}

// double as_double = 3;
inline bool Exemplar::_internal_has_as_double() const {
  return value_case() == kAsDouble;
}
inline void Exemplar::set_has_as_double() {
  _oneof_case_[0] = kAsDouble;
}
inline void Exemplar::clear_as_double() {
  if (_internal_has_as_double()) {
    value_.as_double_ = 0;
    clear_has_value();
  }
}
inline double Exemplar::_internal_as_double() const {
  if (_internal_has_as_double()) {
    return value_.as_double_;
  }
  return 0;
}
inline void Exemplar::_internal_set_as_double(double value) {
  if (!_internal_has_as_double()) {
    clear_value();
    set_has_as_double();
  }
  value_.as_double_ = value;
}
inline double Exemplar::as_double() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.as_double)
  return _internal_as_double();
}
inline void Exemplar::set_as_double(double value) {
  _internal_set_as_double(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.as_double)
}

// sfixed64 as_int = 6;
inline bool Exemplar::_internal_has_as_int() const {
  return value_case() == kAsInt;
}
inline void Exemplar::set_has_as_int() {
  _oneof_case_[0] = kAsInt;
}
inline void Exemplar::clear_as_int() {
  if (_internal_has_as_int()) {
    value_.as_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Exemplar::_internal_as_int() const {
  if (_internal_has_as_int()) {
    return value_.as_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Exemplar::_internal_set_as_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_as_int()) {
    clear_value();
    set_has_as_int();
  }
  value_.as_int_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Exemplar::as_int() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.as_int)
  return _internal_as_int();
}
inline void Exemplar::set_as_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_as_int(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.as_int)
}

// bytes span_id = 4;
inline void Exemplar::clear_span_id() {
  span_id_.ClearToEmpty();
}
inline const std::string& Exemplar::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.span_id)
  return _internal_span_id();
}
inline void Exemplar::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.span_id)
}
inline std::string* Exemplar::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Exemplar.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& Exemplar::_internal_span_id() const {
  return span_id_.Get();
}
inline void Exemplar::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Exemplar::set_span_id(std::string&& value) {
  
  span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.Exemplar.span_id)
}
inline void Exemplar::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.Exemplar.span_id)
}
inline void Exemplar::set_span_id(const void* value,
    size_t size) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.Exemplar.span_id)
}
inline std::string* Exemplar::_internal_mutable_span_id() {
  
  return span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Exemplar::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Exemplar.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Exemplar::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Exemplar.span_id)
}

// bytes trace_id = 5;
inline void Exemplar::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& Exemplar::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
  return _internal_trace_id();
}
inline void Exemplar::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
}
inline std::string* Exemplar::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& Exemplar::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void Exemplar::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Exemplar::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
}
inline void Exemplar::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
}
inline void Exemplar::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
}
inline std::string* Exemplar::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Exemplar::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Exemplar::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Exemplar.trace_id)
}

inline bool Exemplar::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Exemplar::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Exemplar::ValueCase Exemplar::value_case() const {
  return Exemplar::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// IntDataPoint

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
inline int IntDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int IntDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
IntDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
IntDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void IntDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void IntDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void IntDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void IntDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void IntDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void IntDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntDataPoint.time_unix_nano)
}

// sfixed64 value = 4;
inline void IntDataPoint::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntDataPoint::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntDataPoint::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.value)
  return _internal_value();
}
inline void IntDataPoint::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void IntDataPoint::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntDataPoint.value)
}

// repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
inline int IntDataPoint::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int IntDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void IntDataPoint::clear_exemplars() {
  exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntDataPoint::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >*
IntDataPoint::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return &exemplars_;
}
inline const ::opentelemetry::proto::metrics::v1::IntExemplar& IntDataPoint::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntExemplar& IntDataPoint::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return _internal_exemplars(index);
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntDataPoint::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntDataPoint::add_exemplars() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return _internal_add_exemplars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >&
IntDataPoint::exemplars() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntDataPoint.exemplars)
  return exemplars_;
}

// -------------------------------------------------------------------

// IntGauge

// repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
inline int IntGauge::_internal_data_points_size() const {
  return data_points_.size();
}
inline int IntGauge::data_points_size() const {
  return _internal_data_points_size();
}
inline void IntGauge::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntGauge::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >*
IntGauge::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::IntDataPoint& IntGauge::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntDataPoint& IntGauge::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntGauge::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntGauge::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >&
IntGauge::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntGauge.data_points)
  return data_points_;
}

// -------------------------------------------------------------------

// IntSum

// repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
inline int IntSum::_internal_data_points_size() const {
  return data_points_.size();
}
inline int IntSum::data_points_size() const {
  return _internal_data_points_size();
}
inline void IntSum::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntSum::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >*
IntSum::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::IntDataPoint& IntSum::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntDataPoint& IntSum::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntSum::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntDataPoint* IntSum::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntDataPoint >&
IntSum::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntSum.data_points)
  return data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void IntSum::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality IntSum::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality IntSum::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntSum.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void IntSum::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void IntSum::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntSum.aggregation_temporality)
}

// bool is_monotonic = 3;
inline void IntSum::clear_is_monotonic() {
  is_monotonic_ = false;
}
inline bool IntSum::_internal_is_monotonic() const {
  return is_monotonic_;
}
inline bool IntSum::is_monotonic() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntSum.is_monotonic)
  return _internal_is_monotonic();
}
inline void IntSum::_internal_set_is_monotonic(bool value) {
  
  is_monotonic_ = value;
}
inline void IntSum::set_is_monotonic(bool value) {
  _internal_set_is_monotonic(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntSum.is_monotonic)
}

// -------------------------------------------------------------------

// IntHistogramDataPoint

// repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
inline int IntHistogramDataPoint::_internal_labels_size() const {
  return labels_.size();
}
inline int IntHistogramDataPoint::labels_size() const {
  return _internal_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntHistogramDataPoint::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
IntHistogramDataPoint::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return &labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntHistogramDataPoint::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntHistogramDataPoint::labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return _internal_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntHistogramDataPoint::_internal_add_labels() {
  return labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntHistogramDataPoint::add_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
IntHistogramDataPoint::labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.labels)
  return labels_;
}

// fixed64 start_time_unix_nano = 2;
inline void IntHistogramDataPoint::clear_start_time_unix_nano() {
  start_time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::_internal_start_time_unix_nano() const {
  return start_time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::start_time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.start_time_unix_nano)
  return _internal_start_time_unix_nano();
}
inline void IntHistogramDataPoint::_internal_set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_unix_nano_ = value;
}
inline void IntHistogramDataPoint::set_start_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.start_time_unix_nano)
}

// fixed64 time_unix_nano = 3;
inline void IntHistogramDataPoint::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void IntHistogramDataPoint::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void IntHistogramDataPoint::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.time_unix_nano)
}

// fixed64 count = 4;
inline void IntHistogramDataPoint::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::count() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.count)
  return _internal_count();
}
inline void IntHistogramDataPoint::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void IntHistogramDataPoint::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.count)
}

// sfixed64 sum = 5;
inline void IntHistogramDataPoint::clear_sum() {
  sum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntHistogramDataPoint::_internal_sum() const {
  return sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntHistogramDataPoint::sum() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.sum)
  return _internal_sum();
}
inline void IntHistogramDataPoint::_internal_set_sum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sum_ = value;
}
inline void IntHistogramDataPoint::set_sum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.sum)
}

// repeated fixed64 bucket_counts = 6;
inline int IntHistogramDataPoint::_internal_bucket_counts_size() const {
  return bucket_counts_.size();
}
inline int IntHistogramDataPoint::bucket_counts_size() const {
  return _internal_bucket_counts_size();
}
inline void IntHistogramDataPoint::clear_bucket_counts() {
  bucket_counts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::_internal_bucket_counts(int index) const {
  return bucket_counts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntHistogramDataPoint::bucket_counts(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
  return _internal_bucket_counts(index);
}
inline void IntHistogramDataPoint::set_bucket_counts(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
}
inline void IntHistogramDataPoint::_internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  bucket_counts_.Add(value);
}
inline void IntHistogramDataPoint::add_bucket_counts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_bucket_counts(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
IntHistogramDataPoint::_internal_bucket_counts() const {
  return bucket_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
IntHistogramDataPoint::bucket_counts() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
  return _internal_bucket_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
IntHistogramDataPoint::_internal_mutable_bucket_counts() {
  return &bucket_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
IntHistogramDataPoint::mutable_bucket_counts() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.bucket_counts)
  return _internal_mutable_bucket_counts();
}

// repeated double explicit_bounds = 7;
inline int IntHistogramDataPoint::_internal_explicit_bounds_size() const {
  return explicit_bounds_.size();
}
inline int IntHistogramDataPoint::explicit_bounds_size() const {
  return _internal_explicit_bounds_size();
}
inline void IntHistogramDataPoint::clear_explicit_bounds() {
  explicit_bounds_.Clear();
}
inline double IntHistogramDataPoint::_internal_explicit_bounds(int index) const {
  return explicit_bounds_.Get(index);
}
inline double IntHistogramDataPoint::explicit_bounds(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds(index);
}
inline void IntHistogramDataPoint::set_explicit_bounds(int index, double value) {
  explicit_bounds_.Set(index, value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
}
inline void IntHistogramDataPoint::_internal_add_explicit_bounds(double value) {
  explicit_bounds_.Add(value);
}
inline void IntHistogramDataPoint::add_explicit_bounds(double value) {
  _internal_add_explicit_bounds(value);
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IntHistogramDataPoint::_internal_explicit_bounds() const {
  return explicit_bounds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IntHistogramDataPoint::explicit_bounds() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
  return _internal_explicit_bounds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IntHistogramDataPoint::_internal_mutable_explicit_bounds() {
  return &explicit_bounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IntHistogramDataPoint::mutable_explicit_bounds() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.explicit_bounds)
  return _internal_mutable_explicit_bounds();
}

// repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
inline int IntHistogramDataPoint::_internal_exemplars_size() const {
  return exemplars_.size();
}
inline int IntHistogramDataPoint::exemplars_size() const {
  return _internal_exemplars_size();
}
inline void IntHistogramDataPoint::clear_exemplars() {
  exemplars_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntHistogramDataPoint::mutable_exemplars(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return exemplars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >*
IntHistogramDataPoint::mutable_exemplars() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return &exemplars_;
}
inline const ::opentelemetry::proto::metrics::v1::IntExemplar& IntHistogramDataPoint::_internal_exemplars(int index) const {
  return exemplars_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntExemplar& IntHistogramDataPoint::exemplars(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return _internal_exemplars(index);
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntHistogramDataPoint::_internal_add_exemplars() {
  return exemplars_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntExemplar* IntHistogramDataPoint::add_exemplars() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return _internal_add_exemplars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntExemplar >&
IntHistogramDataPoint::exemplars() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogramDataPoint.exemplars)
  return exemplars_;
}

// -------------------------------------------------------------------

// IntHistogram

// repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
inline int IntHistogram::_internal_data_points_size() const {
  return data_points_.size();
}
inline int IntHistogram::data_points_size() const {
  return _internal_data_points_size();
}
inline void IntHistogram::clear_data_points() {
  data_points_.Clear();
}
inline ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* IntHistogram::mutable_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >*
IntHistogram::mutable_data_points() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return &data_points_;
}
inline const ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint& IntHistogram::_internal_data_points(int index) const {
  return data_points_.Get(index);
}
inline const ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint& IntHistogram::data_points(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return _internal_data_points(index);
}
inline ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* IntHistogram::_internal_add_data_points() {
  return data_points_.Add();
}
inline ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* IntHistogram::add_data_points() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return _internal_add_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >&
IntHistogram::data_points() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntHistogram.data_points)
  return data_points_;
}

// .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
inline void IntHistogram::clear_aggregation_temporality() {
  aggregation_temporality_ = 0;
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality IntHistogram::_internal_aggregation_temporality() const {
  return static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(aggregation_temporality_);
}
inline ::opentelemetry::proto::metrics::v1::AggregationTemporality IntHistogram::aggregation_temporality() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntHistogram.aggregation_temporality)
  return _internal_aggregation_temporality();
}
inline void IntHistogram::_internal_set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  
  aggregation_temporality_ = value;
}
inline void IntHistogram::set_aggregation_temporality(::opentelemetry::proto::metrics::v1::AggregationTemporality value) {
  _internal_set_aggregation_temporality(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntHistogram.aggregation_temporality)
}

// -------------------------------------------------------------------

// IntExemplar

// repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
inline int IntExemplar::_internal_filtered_labels_size() const {
  return filtered_labels_.size();
}
inline int IntExemplar::filtered_labels_size() const {
  return _internal_filtered_labels_size();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntExemplar::mutable_filtered_labels(int index) {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return filtered_labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >*
IntExemplar::mutable_filtered_labels() {
  // @@protoc_insertion_point(field_mutable_list:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return &filtered_labels_;
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntExemplar::_internal_filtered_labels(int index) const {
  return filtered_labels_.Get(index);
}
inline const ::opentelemetry::proto::common::v1::StringKeyValue& IntExemplar::filtered_labels(int index) const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return _internal_filtered_labels(index);
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntExemplar::_internal_add_filtered_labels() {
  return filtered_labels_.Add();
}
inline ::opentelemetry::proto::common::v1::StringKeyValue* IntExemplar::add_filtered_labels() {
  // @@protoc_insertion_point(field_add:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return _internal_add_filtered_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::opentelemetry::proto::common::v1::StringKeyValue >&
IntExemplar::filtered_labels() const {
  // @@protoc_insertion_point(field_list:opentelemetry.proto.metrics.v1.IntExemplar.filtered_labels)
  return filtered_labels_;
}

// fixed64 time_unix_nano = 2;
inline void IntExemplar::clear_time_unix_nano() {
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntExemplar::_internal_time_unix_nano() const {
  return time_unix_nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntExemplar::time_unix_nano() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.time_unix_nano)
  return _internal_time_unix_nano();
}
inline void IntExemplar::_internal_set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_unix_nano_ = value;
}
inline void IntExemplar::set_time_unix_nano(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_unix_nano(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntExemplar.time_unix_nano)
}

// sfixed64 value = 3;
inline void IntExemplar::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntExemplar::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IntExemplar::value() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.value)
  return _internal_value();
}
inline void IntExemplar::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void IntExemplar::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntExemplar.value)
}

// bytes span_id = 4;
inline void IntExemplar::clear_span_id() {
  span_id_.ClearToEmpty();
}
inline const std::string& IntExemplar::span_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
  return _internal_span_id();
}
inline void IntExemplar::set_span_id(const std::string& value) {
  _internal_set_span_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}
inline std::string* IntExemplar::mutable_span_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
  return _internal_mutable_span_id();
}
inline const std::string& IntExemplar::_internal_span_id() const {
  return span_id_.Get();
}
inline void IntExemplar::_internal_set_span_id(const std::string& value) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IntExemplar::set_span_id(std::string&& value) {
  
  span_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}
inline void IntExemplar::set_span_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}
inline void IntExemplar::set_span_id(const void* value,
    size_t size) {
  
  span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}
inline std::string* IntExemplar::_internal_mutable_span_id() {
  
  return span_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IntExemplar::release_span_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
  return span_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IntExemplar::set_allocated_span_id(std::string* span_id) {
  if (span_id != nullptr) {
    
  } else {
    
  }
  span_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), span_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.IntExemplar.span_id)
}

// bytes trace_id = 5;
inline void IntExemplar::clear_trace_id() {
  trace_id_.ClearToEmpty();
}
inline const std::string& IntExemplar::trace_id() const {
  // @@protoc_insertion_point(field_get:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
  return _internal_trace_id();
}
inline void IntExemplar::set_trace_id(const std::string& value) {
  _internal_set_trace_id(value);
  // @@protoc_insertion_point(field_set:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}
inline std::string* IntExemplar::mutable_trace_id() {
  // @@protoc_insertion_point(field_mutable:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
  return _internal_mutable_trace_id();
}
inline const std::string& IntExemplar::_internal_trace_id() const {
  return trace_id_.Get();
}
inline void IntExemplar::_internal_set_trace_id(const std::string& value) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IntExemplar::set_trace_id(std::string&& value) {
  
  trace_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}
inline void IntExemplar::set_trace_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}
inline void IntExemplar::set_trace_id(const void* value,
    size_t size) {
  
  trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}
inline std::string* IntExemplar::_internal_mutable_trace_id() {
  
  return trace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IntExemplar::release_trace_id() {
  // @@protoc_insertion_point(field_release:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
  return trace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IntExemplar::set_allocated_trace_id(std::string* trace_id) {
  if (trace_id != nullptr) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.IntExemplar.trace_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::opentelemetry::proto::metrics::v1::AggregationTemporality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::metrics::v1::AggregationTemporality>() {
  return ::opentelemetry::proto::metrics::v1::AggregationTemporality_descriptor();
}
template <> struct is_proto_enum< ::opentelemetry::proto::metrics::v1::DataPointFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::opentelemetry::proto::metrics::v1::DataPointFlags>() {
  return ::opentelemetry::proto::metrics::v1::DataPointFlags_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto
