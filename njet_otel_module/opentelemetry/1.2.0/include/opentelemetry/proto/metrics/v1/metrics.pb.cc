// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opentelemetry/proto/metrics/v1/metrics.proto

#include "opentelemetry/proto/metrics/v1/metrics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExponentialHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ExponentialHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExponentialHistogramDataPoint_Buckets_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Gauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Histogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NumberDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Sum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Summary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Resource_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto;
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {
class MetricsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricsData> _instance;
} _MetricsData_default_instance_;
class ResourceMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMetrics> _instance;
} _ResourceMetrics_default_instance_;
class InstrumentationLibraryMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentationLibraryMetrics> _instance;
} _InstrumentationLibraryMetrics_default_instance_;
class MetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metric> _instance;
} _Metric_default_instance_;
class GaugeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gauge> _instance;
} _Gauge_default_instance_;
class SumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sum> _instance;
} _Sum_default_instance_;
class HistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Histogram> _instance;
} _Histogram_default_instance_;
class ExponentialHistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExponentialHistogram> _instance;
} _ExponentialHistogram_default_instance_;
class SummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary> _instance;
} _Summary_default_instance_;
class NumberDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NumberDataPoint> _instance;
} _NumberDataPoint_default_instance_;
class HistogramDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistogramDataPoint> _instance;
} _HistogramDataPoint_default_instance_;
class ExponentialHistogramDataPoint_BucketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExponentialHistogramDataPoint_Buckets> _instance;
} _ExponentialHistogramDataPoint_Buckets_default_instance_;
class ExponentialHistogramDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExponentialHistogramDataPoint> _instance;
} _ExponentialHistogramDataPoint_default_instance_;
class SummaryDataPoint_ValueAtQuantileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryDataPoint_ValueAtQuantile> _instance;
} _SummaryDataPoint_ValueAtQuantile_default_instance_;
class SummaryDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryDataPoint> _instance;
} _SummaryDataPoint_default_instance_;
class ExemplarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Exemplar> _instance;
} _Exemplar_default_instance_;
class IntDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntDataPoint> _instance;
} _IntDataPoint_default_instance_;
class IntGaugeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntGauge> _instance;
} _IntGauge_default_instance_;
class IntSumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntSum> _instance;
} _IntSum_default_instance_;
class IntHistogramDataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntHistogramDataPoint> _instance;
} _IntHistogramDataPoint_default_instance_;
class IntHistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntHistogram> _instance;
} _IntHistogram_default_instance_;
class IntExemplarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntExemplar> _instance;
} _IntExemplar_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry
static void InitDefaultsscc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_Exemplar_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::Exemplar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_ExponentialHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_ExponentialHistogram_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::ExponentialHistogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExponentialHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExponentialHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_ExponentialHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_ExponentialHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ExponentialHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ExponentialHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_ExponentialHistogramDataPoint_Buckets_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_ExponentialHistogramDataPoint_Buckets_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_Buckets_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExponentialHistogramDataPoint_Buckets_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExponentialHistogramDataPoint_Buckets_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {}};

static void InitDefaultsscc_info_Gauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_Gauge_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::Gauge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Gauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Gauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_NumberDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_Histogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_Histogram_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::Histogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Histogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Histogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_HistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_HistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_HistogramDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::HistogramDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_InstrumentationLibraryMetrics_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_InstrumentationLibrary_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntExemplar_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntExemplar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntGauge_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntGauge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntHistogram_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntHistogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntHistogramDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_IntSum_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::IntSum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_Metric_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::Metric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_Gauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_Sum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_Histogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_ExponentialHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
      &scc_info_Summary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_MetricsData_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_MetricsData_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::MetricsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricsData_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MetricsData_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_NumberDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_NumberDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::NumberDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NumberDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NumberDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_ResourceMetrics_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::ResourceMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_Resource_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto.base,
      &scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_Sum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_Sum_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::Sum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Sum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Sum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_NumberDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_Summary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_Summary_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::Summary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Summary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Summary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_SummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_SummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_SummaryDataPoint_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::SummaryDataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {
      &scc_info_AnyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_StringKeyValue_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto.base,
      &scc_info_SummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,}};

static void InitDefaultsscc_info_SummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::opentelemetry::proto::metrics::v1::_SummaryDataPoint_ValueAtQuantile_default_instance_;
    new (ptr) ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::MetricsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::MetricsData, resource_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, resource_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, instrumentation_library_metrics_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, schema_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics, instrumentation_library_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics, metrics_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics, schema_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, name_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, description_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, unit_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Gauge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Gauge, data_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Sum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Sum, data_points_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Sum, aggregation_temporality_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Sum, is_monotonic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Histogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Histogram, data_points_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Histogram, aggregation_temporality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogram, data_points_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogram, aggregation_temporality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Summary, data_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, time_unix_nano_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, exemplars_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, flags_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, sum_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, bucket_counts_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, explicit_bounds_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, exemplars_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets, offset_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets, bucket_counts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, sum_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, scale_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, zero_count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, positive_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, negative_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, flags_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, exemplars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile, quantile_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, sum_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, quantile_values_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, filtered_attributes_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, filtered_labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, time_unix_nano_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, span_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, trace_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, value_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntDataPoint, exemplars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntGauge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntGauge, data_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntSum, data_points_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntSum, aggregation_temporality_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntSum, is_monotonic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, start_time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, count_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, sum_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, bucket_counts_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, explicit_bounds_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint, exemplars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogram, data_points_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntHistogram, aggregation_temporality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, filtered_labels_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, time_unix_nano_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, value_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, span_id_),
  PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::IntExemplar, trace_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::opentelemetry::proto::metrics::v1::MetricsData)},
  { 6, -1, sizeof(::opentelemetry::proto::metrics::v1::ResourceMetrics)},
  { 14, -1, sizeof(::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics)},
  { 22, -1, sizeof(::opentelemetry::proto::metrics::v1::Metric)},
  { 39, -1, sizeof(::opentelemetry::proto::metrics::v1::Gauge)},
  { 45, -1, sizeof(::opentelemetry::proto::metrics::v1::Sum)},
  { 53, -1, sizeof(::opentelemetry::proto::metrics::v1::Histogram)},
  { 60, -1, sizeof(::opentelemetry::proto::metrics::v1::ExponentialHistogram)},
  { 67, -1, sizeof(::opentelemetry::proto::metrics::v1::Summary)},
  { 73, -1, sizeof(::opentelemetry::proto::metrics::v1::NumberDataPoint)},
  { 87, -1, sizeof(::opentelemetry::proto::metrics::v1::HistogramDataPoint)},
  { 102, -1, sizeof(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets)},
  { 109, -1, sizeof(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint)},
  { 125, -1, sizeof(::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile)},
  { 132, -1, sizeof(::opentelemetry::proto::metrics::v1::SummaryDataPoint)},
  { 145, -1, sizeof(::opentelemetry::proto::metrics::v1::Exemplar)},
  { 158, -1, sizeof(::opentelemetry::proto::metrics::v1::IntDataPoint)},
  { 168, -1, sizeof(::opentelemetry::proto::metrics::v1::IntGauge)},
  { 174, -1, sizeof(::opentelemetry::proto::metrics::v1::IntSum)},
  { 182, -1, sizeof(::opentelemetry::proto::metrics::v1::IntHistogramDataPoint)},
  { 195, -1, sizeof(::opentelemetry::proto::metrics::v1::IntHistogram)},
  { 202, -1, sizeof(::opentelemetry::proto::metrics::v1::IntExemplar)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_MetricsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_ResourceMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_InstrumentationLibraryMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_Metric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_Gauge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_Sum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_Histogram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_ExponentialHistogram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_Summary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_NumberDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_HistogramDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_Buckets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_SummaryDataPoint_ValueAtQuantile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_SummaryDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_Exemplar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntGauge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntSum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntHistogramDataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntHistogram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::opentelemetry::proto::metrics::v1::_IntExemplar_default_instance_),
};

const char descriptor_table_protodef_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,opentelemetry/proto/metrics/v1/metrics"
  ".proto\022\036opentelemetry.proto.metrics.v1\032*"
  "opentelemetry/proto/common/v1/common.pro"
  "to\032.opentelemetry/proto/resource/v1/reso"
  "urce.proto\"X\n\013MetricsData\022I\n\020resource_me"
  "trics\030\001 \003(\0132/.opentelemetry.proto.metric"
  "s.v1.ResourceMetrics\"\312\001\n\017ResourceMetrics"
  "\022;\n\010resource\030\001 \001(\0132).opentelemetry.proto"
  ".resource.v1.Resource\022f\n\037instrumentation"
  "_library_metrics\030\002 \003(\0132=.opentelemetry.p"
  "roto.metrics.v1.InstrumentationLibraryMe"
  "trics\022\022\n\nschema_url\030\003 \001(\t\"\304\001\n\035Instrument"
  "ationLibraryMetrics\022V\n\027instrumentation_l"
  "ibrary\030\001 \001(\01325.opentelemetry.proto.commo"
  "n.v1.InstrumentationLibrary\0227\n\007metrics\030\002"
  " \003(\0132&.opentelemetry.proto.metrics.v1.Me"
  "tric\022\022\n\nschema_url\030\003 \001(\t\"\315\004\n\006Metric\022\014\n\004n"
  "ame\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\014\n\004unit\030\003"
  " \001(\t\022A\n\tint_gauge\030\004 \001(\0132(.opentelemetry."
  "proto.metrics.v1.IntGaugeB\002\030\001H\000\0226\n\005gauge"
  "\030\005 \001(\0132%.opentelemetry.proto.metrics.v1."
  "GaugeH\000\022=\n\007int_sum\030\006 \001(\0132&.opentelemetry"
  ".proto.metrics.v1.IntSumB\002\030\001H\000\0222\n\003sum\030\007 "
  "\001(\0132#.opentelemetry.proto.metrics.v1.Sum"
  "H\000\022I\n\rint_histogram\030\010 \001(\0132,.opentelemetr"
  "y.proto.metrics.v1.IntHistogramB\002\030\001H\000\022>\n"
  "\thistogram\030\t \001(\0132).opentelemetry.proto.m"
  "etrics.v1.HistogramH\000\022U\n\025exponential_his"
  "togram\030\n \001(\01324.opentelemetry.proto.metri"
  "cs.v1.ExponentialHistogramH\000\022:\n\007summary\030"
  "\013 \001(\0132\'.opentelemetry.proto.metrics.v1.S"
  "ummaryH\000B\006\n\004data\"M\n\005Gauge\022D\n\013data_points"
  "\030\001 \003(\0132/.opentelemetry.proto.metrics.v1."
  "NumberDataPoint\"\272\001\n\003Sum\022D\n\013data_points\030\001"
  " \003(\0132/.opentelemetry.proto.metrics.v1.Nu"
  "mberDataPoint\022W\n\027aggregation_temporality"
  "\030\002 \001(\01626.opentelemetry.proto.metrics.v1."
  "AggregationTemporality\022\024\n\014is_monotonic\030\003"
  " \001(\010\"\255\001\n\tHistogram\022G\n\013data_points\030\001 \003(\0132"
  "2.opentelemetry.proto.metrics.v1.Histogr"
  "amDataPoint\022W\n\027aggregation_temporality\030\002"
  " \001(\01626.opentelemetry.proto.metrics.v1.Ag"
  "gregationTemporality\"\303\001\n\024ExponentialHist"
  "ogram\022R\n\013data_points\030\001 \003(\0132=.opentelemet"
  "ry.proto.metrics.v1.ExponentialHistogram"
  "DataPoint\022W\n\027aggregation_temporality\030\002 \001"
  "(\01626.opentelemetry.proto.metrics.v1.Aggr"
  "egationTemporality\"P\n\007Summary\022E\n\013data_po"
  "ints\030\001 \003(\01320.opentelemetry.proto.metrics"
  ".v1.SummaryDataPoint\"\303\002\n\017NumberDataPoint"
  "\022;\n\nattributes\030\007 \003(\0132\'.opentelemetry.pro"
  "to.common.v1.KeyValue\022A\n\006labels\030\001 \003(\0132-."
  "opentelemetry.proto.common.v1.StringKeyV"
  "alueB\002\030\001\022\034\n\024start_time_unix_nano\030\002 \001(\006\022\026"
  "\n\016time_unix_nano\030\003 \001(\006\022\023\n\tas_double\030\004 \001("
  "\001H\000\022\020\n\006as_int\030\006 \001(\020H\000\022;\n\texemplars\030\005 \003(\013"
  "2(.opentelemetry.proto.metrics.v1.Exempl"
  "ar\022\r\n\005flags\030\010 \001(\rB\007\n\005value\"\342\002\n\022Histogram"
  "DataPoint\022;\n\nattributes\030\t \003(\0132\'.opentele"
  "metry.proto.common.v1.KeyValue\022A\n\006labels"
  "\030\001 \003(\0132-.opentelemetry.proto.common.v1.S"
  "tringKeyValueB\002\030\001\022\034\n\024start_time_unix_nan"
  "o\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005count"
  "\030\004 \001(\006\022\013\n\003sum\030\005 \001(\001\022\025\n\rbucket_counts\030\006 \003"
  "(\006\022\027\n\017explicit_bounds\030\007 \003(\001\022;\n\texemplars"
  "\030\010 \003(\0132(.opentelemetry.proto.metrics.v1."
  "Exemplar\022\r\n\005flags\030\n \001(\r\"\201\004\n\035ExponentialH"
  "istogramDataPoint\022;\n\nattributes\030\001 \003(\0132\'."
  "opentelemetry.proto.common.v1.KeyValue\022\034"
  "\n\024start_time_unix_nano\030\002 \001(\006\022\026\n\016time_uni"
  "x_nano\030\003 \001(\006\022\r\n\005count\030\004 \001(\006\022\013\n\003sum\030\005 \001(\001"
  "\022\r\n\005scale\030\006 \001(\021\022\022\n\nzero_count\030\007 \001(\006\022W\n\010p"
  "ositive\030\010 \001(\0132E.opentelemetry.proto.metr"
  "ics.v1.ExponentialHistogramDataPoint.Buc"
  "kets\022W\n\010negative\030\t \001(\0132E.opentelemetry.p"
  "roto.metrics.v1.ExponentialHistogramData"
  "Point.Buckets\022\r\n\005flags\030\n \001(\r\022;\n\texemplar"
  "s\030\013 \003(\0132(.opentelemetry.proto.metrics.v1"
  ".Exemplar\0320\n\007Buckets\022\016\n\006offset\030\001 \001(\021\022\025\n\r"
  "bucket_counts\030\002 \003(\004\"\202\003\n\020SummaryDataPoint"
  "\022;\n\nattributes\030\007 \003(\0132\'.opentelemetry.pro"
  "to.common.v1.KeyValue\022A\n\006labels\030\001 \003(\0132-."
  "opentelemetry.proto.common.v1.StringKeyV"
  "alueB\002\030\001\022\034\n\024start_time_unix_nano\030\002 \001(\006\022\026"
  "\n\016time_unix_nano\030\003 \001(\006\022\r\n\005count\030\004 \001(\006\022\013\n"
  "\003sum\030\005 \001(\001\022Y\n\017quantile_values\030\006 \003(\0132@.op"
  "entelemetry.proto.metrics.v1.SummaryData"
  "Point.ValueAtQuantile\022\r\n\005flags\030\010 \001(\r\0322\n\017"
  "ValueAtQuantile\022\020\n\010quantile\030\001 \001(\001\022\r\n\005val"
  "ue\030\002 \001(\001\"\207\002\n\010Exemplar\022D\n\023filtered_attrib"
  "utes\030\007 \003(\0132\'.opentelemetry.proto.common."
  "v1.KeyValue\022J\n\017filtered_labels\030\001 \003(\0132-.o"
  "pentelemetry.proto.common.v1.StringKeyVa"
  "lueB\002\030\001\022\026\n\016time_unix_nano\030\002 \001(\006\022\023\n\tas_do"
  "uble\030\003 \001(\001H\000\022\020\n\006as_int\030\006 \001(\020H\000\022\017\n\007span_i"
  "d\030\004 \001(\014\022\020\n\010trace_id\030\005 \001(\014B\007\n\005value\"\326\001\n\014I"
  "ntDataPoint\022=\n\006labels\030\001 \003(\0132-.openteleme"
  "try.proto.common.v1.StringKeyValue\022\034\n\024st"
  "art_time_unix_nano\030\002 \001(\006\022\026\n\016time_unix_na"
  "no\030\003 \001(\006\022\r\n\005value\030\004 \001(\020\022>\n\texemplars\030\005 \003"
  "(\0132+.opentelemetry.proto.metrics.v1.IntE"
  "xemplar:\002\030\001\"Q\n\010IntGauge\022A\n\013data_points\030\001"
  " \003(\0132,.opentelemetry.proto.metrics.v1.In"
  "tDataPoint:\002\030\001\"\276\001\n\006IntSum\022A\n\013data_points"
  "\030\001 \003(\0132,.opentelemetry.proto.metrics.v1."
  "IntDataPoint\022W\n\027aggregation_temporality\030"
  "\002 \001(\01626.opentelemetry.proto.metrics.v1.A"
  "ggregationTemporality\022\024\n\014is_monotonic\030\003 "
  "\001(\010:\002\030\001\"\234\002\n\025IntHistogramDataPoint\022=\n\006lab"
  "els\030\001 \003(\0132-.opentelemetry.proto.common.v"
  "1.StringKeyValue\022\034\n\024start_time_unix_nano"
  "\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005count\030"
  "\004 \001(\006\022\013\n\003sum\030\005 \001(\020\022\025\n\rbucket_counts\030\006 \003("
  "\006\022\027\n\017explicit_bounds\030\007 \003(\001\022>\n\texemplars\030"
  "\010 \003(\0132+.opentelemetry.proto.metrics.v1.I"
  "ntExemplar:\002\030\001\"\267\001\n\014IntHistogram\022J\n\013data_"
  "points\030\001 \003(\01325.opentelemetry.proto.metri"
  "cs.v1.IntHistogramDataPoint\022W\n\027aggregati"
  "on_temporality\030\002 \001(\01626.opentelemetry.pro"
  "to.metrics.v1.AggregationTemporality:\002\030\001"
  "\"\243\001\n\013IntExemplar\022F\n\017filtered_labels\030\001 \003("
  "\0132-.opentelemetry.proto.common.v1.String"
  "KeyValue\022\026\n\016time_unix_nano\030\002 \001(\006\022\r\n\005valu"
  "e\030\003 \001(\020\022\017\n\007span_id\030\004 \001(\014\022\020\n\010trace_id\030\005 \001"
  "(\014:\002\030\001*\214\001\n\026AggregationTemporality\022\'\n#AGG"
  "REGATION_TEMPORALITY_UNSPECIFIED\020\000\022!\n\035AG"
  "GREGATION_TEMPORALITY_DELTA\020\001\022&\n\"AGGREGA"
  "TION_TEMPORALITY_CUMULATIVE\020\002*;\n\016DataPoi"
  "ntFlags\022\r\n\tFLAG_NONE\020\000\022\032\n\026FLAG_NO_RECORD"
  "ED_VALUE\020\001Bt\n!io.opentelemetry.proto.met"
  "rics.v1B\014MetricsProtoP\001Z\?github.com/open"
  "-telemetry/opentelemetry-proto/gen/go/me"
  "trics/v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_deps[2] = {
  &::descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
  &::descriptor_table_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_sccs[22] = {
  &scc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_ExponentialHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_ExponentialHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_ExponentialHistogramDataPoint_Buckets_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_Gauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_Histogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_HistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_MetricsData_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_NumberDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_Sum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_Summary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_SummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
  &scc_info_SummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto = {
  false, false, descriptor_table_protodef_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto, "opentelemetry/proto/metrics/v1/metrics.proto", 5296,
  &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_once, descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_sccs, descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_deps, 22, 2,
  schemas, file_default_instances, TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto::offsets,
  file_level_metadata_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto, 22, file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto, file_level_service_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto)), true);
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationTemporality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[0];
}
bool AggregationTemporality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPointFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[1];
}
bool DataPointFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MetricsData::_Internal {
 public:
};

MetricsData::MetricsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resource_metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.MetricsData)
}
MetricsData::MetricsData(const MetricsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_metrics_(from.resource_metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.MetricsData)
}

void MetricsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricsData_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
}

MetricsData::~MetricsData() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.MetricsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MetricsData::ArenaDtor(void* object) {
  MetricsData* _this = reinterpret_cast< MetricsData* >(object);
  (void)_this;
}
void MetricsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricsData& MetricsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricsData_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void MetricsData::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.MetricsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_metrics_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.MetricsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resource_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.MetricsData)
  return target;
}

size_t MetricsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.MetricsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
  total_size += 1UL * this->_internal_resource_metrics_size();
  for (const auto& msg : this->resource_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.MetricsData)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.MetricsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.MetricsData)
    MergeFrom(*source);
  }
}

void MetricsData::MergeFrom(const MetricsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.MetricsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_metrics_.MergeFrom(from.resource_metrics_);
}

void MetricsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.MetricsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsData::CopyFrom(const MetricsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.MetricsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsData::IsInitialized() const {
  return true;
}

void MetricsData::InternalSwap(MetricsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_metrics_.InternalSwap(&other->resource_metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResourceMetrics::_Internal {
 public:
  static const ::opentelemetry::proto::resource::v1::Resource& resource(const ResourceMetrics* msg);
};

const ::opentelemetry::proto::resource::v1::Resource&
ResourceMetrics::_Internal::resource(const ResourceMetrics* msg) {
  return *msg->resource_;
}
void ResourceMetrics::clear_resource() {
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
ResourceMetrics::ResourceMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instrumentation_library_metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ResourceMetrics)
}
ResourceMetrics::ResourceMetrics(const ResourceMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instrumentation_library_metrics_(from.instrumentation_library_metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schema_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_schema_url().empty()) {
    schema_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema_url(), 
      GetArena());
  }
  if (from._internal_has_resource()) {
    resource_ = new ::opentelemetry::proto::resource::v1::Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ResourceMetrics)
}

void ResourceMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  schema_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_ = nullptr;
}

ResourceMetrics::~ResourceMetrics() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ResourceMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  schema_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resource_;
}

void ResourceMetrics::ArenaDtor(void* object) {
  ResourceMetrics* _this = reinterpret_cast< ResourceMetrics* >(object);
  (void)_this;
}
void ResourceMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMetrics& ResourceMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ResourceMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentation_library_metrics_.Clear();
  schema_url_.ClearToEmpty();
  if (GetArena() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opentelemetry.proto.resource.v1.Resource resource = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrumentation_library_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string schema_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_schema_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->has_resource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::resource(this), target, stream);
  }

  // repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrumentation_library_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_instrumentation_library_metrics(i), target, stream);
  }

  // string schema_url = 3;
  if (this->schema_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_url().data(), static_cast<int>(this->_internal_schema_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_schema_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ResourceMetrics)
  return target;
}

size_t ResourceMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics instrumentation_library_metrics = 2;
  total_size += 1UL * this->_internal_instrumentation_library_metrics_size();
  for (const auto& msg : this->instrumentation_library_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string schema_url = 3;
  if (this->schema_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_url());
  }

  // .opentelemetry.proto.resource.v1.Resource resource = 1;
  if (this->has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.ResourceMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.ResourceMetrics)
    MergeFrom(*source);
  }
}

void ResourceMetrics::MergeFrom(const ResourceMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrumentation_library_metrics_.MergeFrom(from.instrumentation_library_metrics_);
  if (from.schema_url().size() > 0) {
    _internal_set_schema_url(from._internal_schema_url());
  }
  if (from.has_resource()) {
    _internal_mutable_resource()->::opentelemetry::proto::resource::v1::Resource::MergeFrom(from._internal_resource());
  }
}

void ResourceMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMetrics::CopyFrom(const ResourceMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMetrics::IsInitialized() const {
  return true;
}

void ResourceMetrics::InternalSwap(ResourceMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrumentation_library_metrics_.InternalSwap(&other->instrumentation_library_metrics_);
  schema_url_.Swap(&other->schema_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(resource_, other->resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InstrumentationLibraryMetrics::_Internal {
 public:
  static const ::opentelemetry::proto::common::v1::InstrumentationLibrary& instrumentation_library(const InstrumentationLibraryMetrics* msg);
};

const ::opentelemetry::proto::common::v1::InstrumentationLibrary&
InstrumentationLibraryMetrics::_Internal::instrumentation_library(const InstrumentationLibraryMetrics* msg) {
  return *msg->instrumentation_library_;
}
void InstrumentationLibraryMetrics::clear_instrumentation_library() {
  if (GetArena() == nullptr && instrumentation_library_ != nullptr) {
    delete instrumentation_library_;
  }
  instrumentation_library_ = nullptr;
}
InstrumentationLibraryMetrics::InstrumentationLibraryMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
}
InstrumentationLibraryMetrics::InstrumentationLibraryMetrics(const InstrumentationLibraryMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schema_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_schema_url().empty()) {
    schema_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema_url(), 
      GetArena());
  }
  if (from._internal_has_instrumentation_library()) {
    instrumentation_library_ = new ::opentelemetry::proto::common::v1::InstrumentationLibrary(*from.instrumentation_library_);
  } else {
    instrumentation_library_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
}

void InstrumentationLibraryMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  schema_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentation_library_ = nullptr;
}

InstrumentationLibraryMetrics::~InstrumentationLibraryMetrics() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentationLibraryMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  schema_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete instrumentation_library_;
}

void InstrumentationLibraryMetrics::ArenaDtor(void* object) {
  InstrumentationLibraryMetrics* _this = reinterpret_cast< InstrumentationLibraryMetrics* >(object);
  (void)_this;
}
void InstrumentationLibraryMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentationLibraryMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentationLibraryMetrics& InstrumentationLibraryMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentationLibraryMetrics_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void InstrumentationLibraryMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  schema_url_.ClearToEmpty();
  if (GetArena() == nullptr && instrumentation_library_ != nullptr) {
    delete instrumentation_library_;
  }
  instrumentation_library_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentationLibraryMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_instrumentation_library(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string schema_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_schema_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentationLibraryMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  if (this->has_instrumentation_library()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::instrumentation_library(this), target, stream);
  }

  // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metrics(i), target, stream);
  }

  // string schema_url = 3;
  if (this->schema_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_schema_url().data(), static_cast<int>(this->_internal_schema_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics.schema_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_schema_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  return target;
}

size_t InstrumentationLibraryMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string schema_url = 3;
  if (this->schema_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_schema_url());
  }

  // .opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;
  if (this->has_instrumentation_library()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *instrumentation_library_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentationLibraryMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentationLibraryMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentationLibraryMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
    MergeFrom(*source);
  }
}

void InstrumentationLibraryMetrics::MergeFrom(const InstrumentationLibraryMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  if (from.schema_url().size() > 0) {
    _internal_set_schema_url(from._internal_schema_url());
  }
  if (from.has_instrumentation_library()) {
    _internal_mutable_instrumentation_library()->::opentelemetry::proto::common::v1::InstrumentationLibrary::MergeFrom(from._internal_instrumentation_library());
  }
}

void InstrumentationLibraryMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentationLibraryMetrics::CopyFrom(const InstrumentationLibraryMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentationLibraryMetrics::IsInitialized() const {
  return true;
}

void InstrumentationLibraryMetrics::InternalSwap(InstrumentationLibraryMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
  schema_url_.Swap(&other->schema_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(instrumentation_library_, other->instrumentation_library_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentationLibraryMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Metric::_Internal {
 public:
  static const ::opentelemetry::proto::metrics::v1::IntGauge& int_gauge(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::Gauge& gauge(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::IntSum& int_sum(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::Sum& sum(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::IntHistogram& int_histogram(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::Histogram& histogram(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& exponential_histogram(const Metric* msg);
  static const ::opentelemetry::proto::metrics::v1::Summary& summary(const Metric* msg);
};

const ::opentelemetry::proto::metrics::v1::IntGauge&
Metric::_Internal::int_gauge(const Metric* msg) {
  return *msg->data_.int_gauge_;
}
const ::opentelemetry::proto::metrics::v1::Gauge&
Metric::_Internal::gauge(const Metric* msg) {
  return *msg->data_.gauge_;
}
const ::opentelemetry::proto::metrics::v1::IntSum&
Metric::_Internal::int_sum(const Metric* msg) {
  return *msg->data_.int_sum_;
}
const ::opentelemetry::proto::metrics::v1::Sum&
Metric::_Internal::sum(const Metric* msg) {
  return *msg->data_.sum_;
}
const ::opentelemetry::proto::metrics::v1::IntHistogram&
Metric::_Internal::int_histogram(const Metric* msg) {
  return *msg->data_.int_histogram_;
}
const ::opentelemetry::proto::metrics::v1::Histogram&
Metric::_Internal::histogram(const Metric* msg) {
  return *msg->data_.histogram_;
}
const ::opentelemetry::proto::metrics::v1::ExponentialHistogram&
Metric::_Internal::exponential_histogram(const Metric* msg) {
  return *msg->data_.exponential_histogram_;
}
const ::opentelemetry::proto::metrics::v1::Summary&
Metric::_Internal::summary(const Metric* msg) {
  return *msg->data_.summary_;
}
void Metric::set_allocated_int_gauge(::opentelemetry::proto::metrics::v1::IntGauge* int_gauge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (int_gauge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_gauge);
    if (message_arena != submessage_arena) {
      int_gauge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_gauge, submessage_arena);
    }
    set_has_int_gauge();
    data_.int_gauge_ = int_gauge;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_gauge)
}
void Metric::set_allocated_gauge(::opentelemetry::proto::metrics::v1::Gauge* gauge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (gauge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gauge);
    if (message_arena != submessage_arena) {
      gauge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gauge, submessage_arena);
    }
    set_has_gauge();
    data_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.gauge)
}
void Metric::set_allocated_int_sum(::opentelemetry::proto::metrics::v1::IntSum* int_sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (int_sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_sum);
    if (message_arena != submessage_arena) {
      int_sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_sum, submessage_arena);
    }
    set_has_int_sum();
    data_.int_sum_ = int_sum;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_sum)
}
void Metric::set_allocated_sum(::opentelemetry::proto::metrics::v1::Sum* sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sum);
    if (message_arena != submessage_arena) {
      sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sum, submessage_arena);
    }
    set_has_sum();
    data_.sum_ = sum;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.sum)
}
void Metric::set_allocated_int_histogram(::opentelemetry::proto::metrics::v1::IntHistogram* int_histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (int_histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_histogram);
    if (message_arena != submessage_arena) {
      int_histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_histogram, submessage_arena);
    }
    set_has_int_histogram();
    data_.int_histogram_ = int_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.int_histogram)
}
void Metric::set_allocated_histogram(::opentelemetry::proto::metrics::v1::Histogram* histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(histogram);
    if (message_arena != submessage_arena) {
      histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogram, submessage_arena);
    }
    set_has_histogram();
    data_.histogram_ = histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.histogram)
}
void Metric::set_allocated_exponential_histogram(::opentelemetry::proto::metrics::v1::ExponentialHistogram* exponential_histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (exponential_histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exponential_histogram);
    if (message_arena != submessage_arena) {
      exponential_histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exponential_histogram, submessage_arena);
    }
    set_has_exponential_histogram();
    data_.exponential_histogram_ = exponential_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
}
void Metric::set_allocated_summary(::opentelemetry::proto::metrics::v1::Summary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
    data_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.summary)
}
Metric::Metric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Metric)
}
Metric::Metric(const Metric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit(), 
      GetArena());
  }
  clear_has_data();
  switch (from.data_case()) {
    case kIntGauge: {
      _internal_mutable_int_gauge()->::opentelemetry::proto::metrics::v1::IntGauge::MergeFrom(from._internal_int_gauge());
      break;
    }
    case kGauge: {
      _internal_mutable_gauge()->::opentelemetry::proto::metrics::v1::Gauge::MergeFrom(from._internal_gauge());
      break;
    }
    case kIntSum: {
      _internal_mutable_int_sum()->::opentelemetry::proto::metrics::v1::IntSum::MergeFrom(from._internal_int_sum());
      break;
    }
    case kSum: {
      _internal_mutable_sum()->::opentelemetry::proto::metrics::v1::Sum::MergeFrom(from._internal_sum());
      break;
    }
    case kIntHistogram: {
      _internal_mutable_int_histogram()->::opentelemetry::proto::metrics::v1::IntHistogram::MergeFrom(from._internal_int_histogram());
      break;
    }
    case kHistogram: {
      _internal_mutable_histogram()->::opentelemetry::proto::metrics::v1::Histogram::MergeFrom(from._internal_histogram());
      break;
    }
    case kExponentialHistogram: {
      _internal_mutable_exponential_histogram()->::opentelemetry::proto::metrics::v1::ExponentialHistogram::MergeFrom(from._internal_exponential_histogram());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::opentelemetry::proto::metrics::v1::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Metric)
}

void Metric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}

Metric::~Metric() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Metric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void Metric::ArenaDtor(void* object) {
  Metric* _this = reinterpret_cast< Metric* >(object);
  (void)_this;
}
void Metric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metric& Metric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metric_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Metric::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.metrics.v1.Metric)
  switch (data_case()) {
    case kIntGauge: {
      if (GetArena() == nullptr) {
        delete data_.int_gauge_;
      }
      break;
    }
    case kGauge: {
      if (GetArena() == nullptr) {
        delete data_.gauge_;
      }
      break;
    }
    case kIntSum: {
      if (GetArena() == nullptr) {
        delete data_.int_sum_;
      }
      break;
    }
    case kSum: {
      if (GetArena() == nullptr) {
        delete data_.sum_;
      }
      break;
    }
    case kIntHistogram: {
      if (GetArena() == nullptr) {
        delete data_.int_histogram_;
      }
      break;
    }
    case kHistogram: {
      if (GetArena() == nullptr) {
        delete data_.histogram_;
      }
      break;
    }
    case kExponentialHistogram: {
      if (GetArena() == nullptr) {
        delete data_.exponential_histogram_;
      }
      break;
    }
    case kSummary: {
      if (GetArena() == nullptr) {
        delete data_.summary_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  description_.ClearToEmpty();
  unit_.ClearToEmpty();
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.metrics.v1.Metric.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.metrics.v1.Metric.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "opentelemetry.proto.metrics.v1.Metric.unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_gauge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.Gauge gauge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gauge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_sum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.Sum sum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_int_histogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.Histogram histogram = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_exponential_histogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.Summary summary = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Metric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.metrics.v1.Metric.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.metrics.v1.Metric.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "opentelemetry.proto.metrics.v1.Metric.unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  // .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];
  if (_internal_has_int_gauge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::int_gauge(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.Gauge gauge = 5;
  if (_internal_has_gauge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gauge(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];
  if (_internal_has_int_sum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::int_sum(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.Sum sum = 7;
  if (_internal_has_sum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sum(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];
  if (_internal_has_int_histogram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::int_histogram(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.Histogram histogram = 9;
  if (_internal_has_histogram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::histogram(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;
  if (_internal_has_exponential_histogram()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::exponential_histogram(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.Summary summary = 11;
  if (_internal_has_summary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::summary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Metric)
  return target;
}

size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Metric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  switch (data_case()) {
    // .opentelemetry.proto.metrics.v1.IntGauge int_gauge = 4 [deprecated = true];
    case kIntGauge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.int_gauge_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.Gauge gauge = 5;
    case kGauge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.gauge_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.IntSum int_sum = 6 [deprecated = true];
    case kIntSum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.int_sum_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.Sum sum = 7;
    case kSum: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.sum_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.IntHistogram int_histogram = 8 [deprecated = true];
    case kIntHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.int_histogram_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.Histogram histogram = 9;
    case kHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.histogram_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;
    case kExponentialHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.exponential_histogram_);
      break;
    }
    // .opentelemetry.proto.metrics.v1.Summary summary = 11;
    case kSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.summary_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  const Metric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.Metric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.Metric)
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Metric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.unit().size() > 0) {
    _internal_set_unit(from._internal_unit());
  }
  switch (from.data_case()) {
    case kIntGauge: {
      _internal_mutable_int_gauge()->::opentelemetry::proto::metrics::v1::IntGauge::MergeFrom(from._internal_int_gauge());
      break;
    }
    case kGauge: {
      _internal_mutable_gauge()->::opentelemetry::proto::metrics::v1::Gauge::MergeFrom(from._internal_gauge());
      break;
    }
    case kIntSum: {
      _internal_mutable_int_sum()->::opentelemetry::proto::metrics::v1::IntSum::MergeFrom(from._internal_int_sum());
      break;
    }
    case kSum: {
      _internal_mutable_sum()->::opentelemetry::proto::metrics::v1::Sum::MergeFrom(from._internal_sum());
      break;
    }
    case kIntHistogram: {
      _internal_mutable_int_histogram()->::opentelemetry::proto::metrics::v1::IntHistogram::MergeFrom(from._internal_int_histogram());
      break;
    }
    case kHistogram: {
      _internal_mutable_histogram()->::opentelemetry::proto::metrics::v1::Histogram::MergeFrom(from._internal_histogram());
      break;
    }
    case kExponentialHistogram: {
      _internal_mutable_exponential_histogram()->::opentelemetry::proto::metrics::v1::ExponentialHistogram::MergeFrom(from._internal_exponential_histogram());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::opentelemetry::proto::metrics::v1::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void Metric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Gauge::_Internal {
 public:
};

Gauge::Gauge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Gauge)
}
Gauge::Gauge(const Gauge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Gauge)
}

void Gauge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Gauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
}

Gauge::~Gauge() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Gauge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Gauge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Gauge::ArenaDtor(void* object) {
  Gauge* _this = reinterpret_cast< Gauge* >(object);
  (void)_this;
}
void Gauge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Gauge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gauge& Gauge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Gauge::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Gauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gauge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gauge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Gauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Gauge)
  return target;
}

size_t Gauge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Gauge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gauge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.Gauge)
  GOOGLE_DCHECK_NE(&from, this);
  const Gauge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gauge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.Gauge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.Gauge)
    MergeFrom(*source);
  }
}

void Gauge::MergeFrom(const Gauge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Gauge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
}

void Gauge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.Gauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gauge::CopyFrom(const Gauge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Gauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gauge::IsInitialized() const {
  return true;
}

void Gauge::InternalSwap(Gauge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gauge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Sum::_Internal {
 public:
};

Sum::Sum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Sum)
}
Sum::Sum(const Sum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&aggregation_temporality_, &from.aggregation_temporality_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_monotonic_) -
    reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Sum)
}

void Sum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_temporality_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_monotonic_) -
      reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
}

Sum::~Sum() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Sum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Sum::ArenaDtor(void* object) {
  Sum* _this = reinterpret_cast< Sum* >(object);
  (void)_this;
}
void Sum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sum& Sum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Sum::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Sum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  ::memset(&aggregation_temporality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_monotonic_) -
      reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(val));
        } else goto handle_unusual;
        continue;
      // bool is_monotonic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_monotonic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Sum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  // bool is_monotonic = 3;
  if (this->is_monotonic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_monotonic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Sum)
  return target;
}

size_t Sum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Sum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  // bool is_monotonic = 3;
  if (this->is_monotonic() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.Sum)
  GOOGLE_DCHECK_NE(&from, this);
  const Sum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.Sum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.Sum)
    MergeFrom(*source);
  }
}

void Sum::MergeFrom(const Sum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Sum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.aggregation_temporality() != 0) {
    _internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
  if (from.is_monotonic() != 0) {
    _internal_set_is_monotonic(from._internal_is_monotonic());
  }
}

void Sum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.Sum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sum::CopyFrom(const Sum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Sum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sum::IsInitialized() const {
  return true;
}

void Sum::InternalSwap(Sum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sum, is_monotonic_)
      + sizeof(Sum::is_monotonic_)
      - PROTOBUF_FIELD_OFFSET(Sum, aggregation_temporality_)>(
          reinterpret_cast<char*>(&aggregation_temporality_),
          reinterpret_cast<char*>(&other->aggregation_temporality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Histogram::_Internal {
 public:
};

Histogram::Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Histogram)
}
Histogram::Histogram(const Histogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aggregation_temporality_ = from.aggregation_temporality_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Histogram)
}

void Histogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Histogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  aggregation_temporality_ = 0;
}

Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Histogram)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Histogram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Histogram::ArenaDtor(void* object) {
  Histogram* _this = reinterpret_cast< Histogram* >(object);
  (void)_this;
}
void Histogram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Histogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Histogram& Histogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Histogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  aggregation_temporality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Histogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Histogram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Histogram)
  return target;
}

size_t Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Histogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Histogram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  const Histogram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Histogram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.Histogram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.Histogram)
    MergeFrom(*source);
  }
}

void Histogram::MergeFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.aggregation_temporality() != 0) {
    _internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
}

void Histogram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram::IsInitialized() const {
  return true;
}

void Histogram::InternalSwap(Histogram* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  swap(aggregation_temporality_, other->aggregation_temporality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Histogram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExponentialHistogram::_Internal {
 public:
};

ExponentialHistogram::ExponentialHistogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogram)
}
ExponentialHistogram::ExponentialHistogram(const ExponentialHistogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aggregation_temporality_ = from.aggregation_temporality_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogram)
}

void ExponentialHistogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExponentialHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  aggregation_temporality_ = 0;
}

ExponentialHistogram::~ExponentialHistogram() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExponentialHistogram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExponentialHistogram::ArenaDtor(void* object) {
  ExponentialHistogram* _this = reinterpret_cast< ExponentialHistogram* >(object);
  (void)_this;
}
void ExponentialHistogram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExponentialHistogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExponentialHistogram& ExponentialHistogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExponentialHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ExponentialHistogram::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  aggregation_temporality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExponentialHistogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExponentialHistogram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  return target;
}

size_t ExponentialHistogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExponentialHistogram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  GOOGLE_DCHECK_NE(&from, this);
  const ExponentialHistogram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExponentialHistogram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.ExponentialHistogram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.ExponentialHistogram)
    MergeFrom(*source);
  }
}

void ExponentialHistogram::MergeFrom(const ExponentialHistogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.aggregation_temporality() != 0) {
    _internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
}

void ExponentialHistogram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExponentialHistogram::CopyFrom(const ExponentialHistogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExponentialHistogram::IsInitialized() const {
  return true;
}

void ExponentialHistogram::InternalSwap(ExponentialHistogram* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  swap(aggregation_temporality_, other->aggregation_temporality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExponentialHistogram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Summary::_Internal {
 public:
};

Summary::Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Summary)
}
Summary::Summary(const Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Summary)
}

void Summary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Summary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Summary::ArenaDtor(void* object) {
  Summary* _this = reinterpret_cast< Summary* >(object);
  (void)_this;
}
void Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary& Summary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Summary)
  return target;
}

size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Summary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.Summary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.Summary)
    MergeFrom(*source);
  }
}

void Summary::MergeFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
}

void Summary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  return true;
}

void Summary::InternalSwap(Summary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NumberDataPoint::_Internal {
 public:
};

void NumberDataPoint::clear_attributes() {
  attributes_.Clear();
}
void NumberDataPoint::clear_labels() {
  labels_.Clear();
}
NumberDataPoint::NumberDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  exemplars_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.NumberDataPoint)
}
NumberDataPoint::NumberDataPoint(const NumberDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      exemplars_(from.exemplars_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
  clear_has_value();
  switch (from.value_case()) {
    case kAsDouble: {
      _internal_set_as_double(from._internal_as_double());
      break;
    }
    case kAsInt: {
      _internal_set_as_int(from._internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.NumberDataPoint)
}

void NumberDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NumberDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
  clear_has_value();
}

NumberDataPoint::~NumberDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.NumberDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NumberDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void NumberDataPoint::ArenaDtor(void* object) {
  NumberDataPoint* _this = reinterpret_cast< NumberDataPoint* >(object);
  (void)_this;
}
void NumberDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NumberDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NumberDataPoint& NumberDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NumberDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void NumberDataPoint::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  switch (value_case()) {
    case kAsDouble: {
      // No need to clear
      break;
    }
    case kAsInt: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void NumberDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  exemplars_.Clear();
  attributes_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // double as_double = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _internal_set_as_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // sfixed64 as_int = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _internal_set_as_int(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NumberDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // double as_double = 4;
  if (_internal_has_as_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_as_double(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_exemplars(i), target, stream);
  }

  // sfixed64 as_int = 6;
  if (_internal_has_as_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(6, this->_internal_as_int(), target);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_attributes(i), target, stream);
  }

  // uint32 flags = 8;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.NumberDataPoint)
  return target;
}

size_t NumberDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // uint32 flags = 8;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  switch (value_case()) {
    // double as_double = 4;
    case kAsDouble: {
      total_size += 1 + 8;
      break;
    }
    // sfixed64 as_int = 6;
    case kAsInt: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumberDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const NumberDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NumberDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.NumberDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.NumberDataPoint)
    MergeFrom(*source);
  }
}

void NumberDataPoint::MergeFrom(const NumberDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  exemplars_.MergeFrom(from.exemplars_);
  attributes_.MergeFrom(from.attributes_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  switch (from.value_case()) {
    case kAsDouble: {
      _internal_set_as_double(from._internal_as_double());
      break;
    }
    case kAsInt: {
      _internal_set_as_int(from._internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void NumberDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberDataPoint::CopyFrom(const NumberDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberDataPoint::IsInitialized() const {
  return true;
}

void NumberDataPoint::InternalSwap(NumberDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  exemplars_.InternalSwap(&other->exemplars_);
  attributes_.InternalSwap(&other->attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberDataPoint, flags_)
      + sizeof(NumberDataPoint::flags_)
      - PROTOBUF_FIELD_OFFSET(NumberDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HistogramDataPoint::_Internal {
 public:
};

void HistogramDataPoint::clear_attributes() {
  attributes_.Clear();
}
void HistogramDataPoint::clear_labels() {
  labels_.Clear();
}
HistogramDataPoint::HistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  bucket_counts_(arena),
  explicit_bounds_(arena),
  exemplars_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.HistogramDataPoint)
}
HistogramDataPoint::HistogramDataPoint(const HistogramDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      bucket_counts_(from.bucket_counts_),
      explicit_bounds_(from.explicit_bounds_),
      exemplars_(from.exemplars_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.HistogramDataPoint)
}

void HistogramDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
}

HistogramDataPoint::~HistogramDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistogramDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HistogramDataPoint::ArenaDtor(void* object) {
  HistogramDataPoint* _this = reinterpret_cast< HistogramDataPoint* >(object);
  (void)_this;
}
void HistogramDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistogramDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistogramDataPoint& HistogramDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void HistogramDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  bucket_counts_.Clear();
  explicit_bounds_.Clear();
  exemplars_.Clear();
  attributes_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // double sum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 bucket_counts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated double explicit_bounds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_explicit_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_explicit_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 flags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistogramDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_count(), target);
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sum(), target);
  }

  // repeated fixed64 bucket_counts = 6;
  if (this->_internal_bucket_counts_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_bucket_counts(), target);
  }

  // repeated double explicit_bounds = 7;
  if (this->_internal_explicit_bounds_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_explicit_bounds(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_exemplars(i), target, stream);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_attributes(i), target, stream);
  }

  // uint32 flags = 10;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  return target;
}

size_t HistogramDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 bucket_counts = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_counts_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double explicit_bounds = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_explicit_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _explicit_bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    total_size += 1 + 8;
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 flags = 10;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistogramDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const HistogramDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistogramDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.HistogramDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.HistogramDataPoint)
    MergeFrom(*source);
  }
}

void HistogramDataPoint::MergeFrom(const HistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  bucket_counts_.MergeFrom(from.bucket_counts_);
  explicit_bounds_.MergeFrom(from.explicit_bounds_);
  exemplars_.MergeFrom(from.exemplars_);
  attributes_.MergeFrom(from.attributes_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.sum() <= 0 && from.sum() >= 0)) {
    _internal_set_sum(from._internal_sum());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void HistogramDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramDataPoint::CopyFrom(const HistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramDataPoint::IsInitialized() const {
  return true;
}

void HistogramDataPoint::InternalSwap(HistogramDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  bucket_counts_.InternalSwap(&other->bucket_counts_);
  explicit_bounds_.InternalSwap(&other->explicit_bounds_);
  exemplars_.InternalSwap(&other->exemplars_);
  attributes_.InternalSwap(&other->attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistogramDataPoint, flags_)
      + sizeof(HistogramDataPoint::flags_)
      - PROTOBUF_FIELD_OFFSET(HistogramDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExponentialHistogramDataPoint_Buckets::_Internal {
 public:
};

ExponentialHistogramDataPoint_Buckets::ExponentialHistogramDataPoint_Buckets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bucket_counts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
}
ExponentialHistogramDataPoint_Buckets::ExponentialHistogramDataPoint_Buckets(const ExponentialHistogramDataPoint_Buckets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bucket_counts_(from.bucket_counts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offset_ = from.offset_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
}

void ExponentialHistogramDataPoint_Buckets::SharedCtor() {
  offset_ = 0;
}

ExponentialHistogramDataPoint_Buckets::~ExponentialHistogramDataPoint_Buckets() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExponentialHistogramDataPoint_Buckets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExponentialHistogramDataPoint_Buckets::ArenaDtor(void* object) {
  ExponentialHistogramDataPoint_Buckets* _this = reinterpret_cast< ExponentialHistogramDataPoint_Buckets* >(object);
  (void)_this;
}
void ExponentialHistogramDataPoint_Buckets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExponentialHistogramDataPoint_Buckets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExponentialHistogramDataPoint_Buckets& ExponentialHistogramDataPoint_Buckets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExponentialHistogramDataPoint_Buckets_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ExponentialHistogramDataPoint_Buckets::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_counts_.Clear();
  offset_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExponentialHistogramDataPoint_Buckets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 bucket_counts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExponentialHistogramDataPoint_Buckets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_offset(), target);
  }

  // repeated uint64 bucket_counts = 2;
  {
    int byte_size = _bucket_counts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_bucket_counts(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  return target;
}

size_t ExponentialHistogramDataPoint_Buckets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 bucket_counts = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->bucket_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // sint32 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExponentialHistogramDataPoint_Buckets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  GOOGLE_DCHECK_NE(&from, this);
  const ExponentialHistogramDataPoint_Buckets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExponentialHistogramDataPoint_Buckets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
    MergeFrom(*source);
  }
}

void ExponentialHistogramDataPoint_Buckets::MergeFrom(const ExponentialHistogramDataPoint_Buckets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_counts_.MergeFrom(from.bucket_counts_);
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void ExponentialHistogramDataPoint_Buckets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExponentialHistogramDataPoint_Buckets::CopyFrom(const ExponentialHistogramDataPoint_Buckets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExponentialHistogramDataPoint_Buckets::IsInitialized() const {
  return true;
}

void ExponentialHistogramDataPoint_Buckets::InternalSwap(ExponentialHistogramDataPoint_Buckets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bucket_counts_.InternalSwap(&other->bucket_counts_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExponentialHistogramDataPoint_Buckets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExponentialHistogramDataPoint::_Internal {
 public:
  static const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& positive(const ExponentialHistogramDataPoint* msg);
  static const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& negative(const ExponentialHistogramDataPoint* msg);
};

const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets&
ExponentialHistogramDataPoint::_Internal::positive(const ExponentialHistogramDataPoint* msg) {
  return *msg->positive_;
}
const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets&
ExponentialHistogramDataPoint::_Internal::negative(const ExponentialHistogramDataPoint* msg) {
  return *msg->negative_;
}
void ExponentialHistogramDataPoint::clear_attributes() {
  attributes_.Clear();
}
ExponentialHistogramDataPoint::ExponentialHistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena),
  exemplars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
}
ExponentialHistogramDataPoint::ExponentialHistogramDataPoint(const ExponentialHistogramDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_),
      exemplars_(from.exemplars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_positive()) {
    positive_ = new ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets(*from.positive_);
  } else {
    positive_ = nullptr;
  }
  if (from._internal_has_negative()) {
    negative_ = new ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets(*from.negative_);
  } else {
    negative_ = nullptr;
  }
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
}

void ExponentialHistogramDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExponentialHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&positive_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&positive_)) + sizeof(flags_));
}

ExponentialHistogramDataPoint::~ExponentialHistogramDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExponentialHistogramDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete positive_;
  if (this != internal_default_instance()) delete negative_;
}

void ExponentialHistogramDataPoint::ArenaDtor(void* object) {
  ExponentialHistogramDataPoint* _this = reinterpret_cast< ExponentialHistogramDataPoint* >(object);
  (void)_this;
}
void ExponentialHistogramDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExponentialHistogramDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExponentialHistogramDataPoint& ExponentialHistogramDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExponentialHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void ExponentialHistogramDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  exemplars_.Clear();
  if (GetArena() == nullptr && positive_ != nullptr) {
    delete positive_;
  }
  positive_ = nullptr;
  if (GetArena() == nullptr && negative_ != nullptr) {
    delete negative_;
  }
  negative_ = nullptr;
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExponentialHistogramDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // double sum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // sint32 scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed64 zero_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          zero_count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_positive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_negative(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExponentialHistogramDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_attributes(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_count(), target);
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sum(), target);
  }

  // sint32 scale = 6;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(6, this->_internal_scale(), target);
  }

  // fixed64 zero_count = 7;
  if (this->zero_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_zero_count(), target);
  }

  // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
  if (this->has_positive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::positive(this), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
  if (this->has_negative()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::negative(this), target, stream);
  }

  // uint32 flags = 10;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_flags(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_exemplars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  return target;
}

size_t ExponentialHistogramDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
  if (this->has_positive()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positive_);
  }

  // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
  if (this->has_negative()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *negative_);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    total_size += 1 + 8;
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    total_size += 1 + 8;
  }

  // fixed64 zero_count = 7;
  if (this->zero_count() != 0) {
    total_size += 1 + 8;
  }

  // sint32 scale = 6;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_scale());
  }

  // uint32 flags = 10;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExponentialHistogramDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ExponentialHistogramDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExponentialHistogramDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
    MergeFrom(*source);
  }
}

void ExponentialHistogramDataPoint::MergeFrom(const ExponentialHistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  exemplars_.MergeFrom(from.exemplars_);
  if (from.has_positive()) {
    _internal_mutable_positive()->::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets::MergeFrom(from._internal_positive());
  }
  if (from.has_negative()) {
    _internal_mutable_negative()->::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets::MergeFrom(from._internal_negative());
  }
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.sum() <= 0 && from.sum() >= 0)) {
    _internal_set_sum(from._internal_sum());
  }
  if (from.zero_count() != 0) {
    _internal_set_zero_count(from._internal_zero_count());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void ExponentialHistogramDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExponentialHistogramDataPoint::CopyFrom(const ExponentialHistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExponentialHistogramDataPoint::IsInitialized() const {
  return true;
}

void ExponentialHistogramDataPoint::InternalSwap(ExponentialHistogramDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  exemplars_.InternalSwap(&other->exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, flags_)
      + sizeof(ExponentialHistogramDataPoint::flags_)
      - PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, positive_)>(
          reinterpret_cast<char*>(&positive_),
          reinterpret_cast<char*>(&other->positive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExponentialHistogramDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SummaryDataPoint_ValueAtQuantile::_Internal {
 public:
};

SummaryDataPoint_ValueAtQuantile::SummaryDataPoint_ValueAtQuantile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
}
SummaryDataPoint_ValueAtQuantile::SummaryDataPoint_ValueAtQuantile(const SummaryDataPoint_ValueAtQuantile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quantile_, &from.quantile_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&quantile_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
}

void SummaryDataPoint_ValueAtQuantile::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&quantile_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&quantile_)) + sizeof(value_));
}

SummaryDataPoint_ValueAtQuantile::~SummaryDataPoint_ValueAtQuantile() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SummaryDataPoint_ValueAtQuantile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SummaryDataPoint_ValueAtQuantile::ArenaDtor(void* object) {
  SummaryDataPoint_ValueAtQuantile* _this = reinterpret_cast< SummaryDataPoint_ValueAtQuantile* >(object);
  (void)_this;
}
void SummaryDataPoint_ValueAtQuantile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryDataPoint_ValueAtQuantile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryDataPoint_ValueAtQuantile& SummaryDataPoint_ValueAtQuantile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryDataPoint_ValueAtQuantile_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void SummaryDataPoint_ValueAtQuantile::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&quantile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&quantile_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryDataPoint_ValueAtQuantile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double quantile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          quantile_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryDataPoint_ValueAtQuantile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double quantile = 1;
  if (!(this->quantile() <= 0 && this->quantile() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_quantile(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  return target;
}

size_t SummaryDataPoint_ValueAtQuantile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double quantile = 1;
  if (!(this->quantile() <= 0 && this->quantile() >= 0)) {
    total_size += 1 + 8;
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryDataPoint_ValueAtQuantile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryDataPoint_ValueAtQuantile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummaryDataPoint_ValueAtQuantile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
    MergeFrom(*source);
  }
}

void SummaryDataPoint_ValueAtQuantile::MergeFrom(const SummaryDataPoint_ValueAtQuantile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.quantile() <= 0 && from.quantile() >= 0)) {
    _internal_set_quantile(from._internal_quantile());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
}

void SummaryDataPoint_ValueAtQuantile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryDataPoint_ValueAtQuantile::CopyFrom(const SummaryDataPoint_ValueAtQuantile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryDataPoint_ValueAtQuantile::IsInitialized() const {
  return true;
}

void SummaryDataPoint_ValueAtQuantile::InternalSwap(SummaryDataPoint_ValueAtQuantile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryDataPoint_ValueAtQuantile, value_)
      + sizeof(SummaryDataPoint_ValueAtQuantile::value_)
      - PROTOBUF_FIELD_OFFSET(SummaryDataPoint_ValueAtQuantile, quantile_)>(
          reinterpret_cast<char*>(&quantile_),
          reinterpret_cast<char*>(&other->quantile_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryDataPoint_ValueAtQuantile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SummaryDataPoint::_Internal {
 public:
};

void SummaryDataPoint::clear_attributes() {
  attributes_.Clear();
}
void SummaryDataPoint::clear_labels() {
  labels_.Clear();
}
SummaryDataPoint::SummaryDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  quantile_values_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.SummaryDataPoint)
}
SummaryDataPoint::SummaryDataPoint(const SummaryDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      quantile_values_(from.quantile_values_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.SummaryDataPoint)
}

void SummaryDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
}

SummaryDataPoint::~SummaryDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SummaryDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SummaryDataPoint::ArenaDtor(void* object) {
  SummaryDataPoint* _this = reinterpret_cast< SummaryDataPoint* >(object);
  (void)_this;
}
void SummaryDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryDataPoint& SummaryDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void SummaryDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  quantile_values_.Clear();
  attributes_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // double sum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quantile_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_count(), target);
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sum(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quantile_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_quantile_values(i), target, stream);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_attributes(i), target, stream);
  }

  // uint32 flags = 8;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  return target;
}

size_t SummaryDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1 [deprecated = true];
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
  total_size += 1UL * this->_internal_quantile_values_size();
  for (const auto& msg : this->quantile_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    total_size += 1 + 8;
  }

  // double sum = 5;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 flags = 8;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummaryDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.SummaryDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.SummaryDataPoint)
    MergeFrom(*source);
  }
}

void SummaryDataPoint::MergeFrom(const SummaryDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  quantile_values_.MergeFrom(from.quantile_values_);
  attributes_.MergeFrom(from.attributes_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.sum() <= 0 && from.sum() >= 0)) {
    _internal_set_sum(from._internal_sum());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void SummaryDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryDataPoint::CopyFrom(const SummaryDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryDataPoint::IsInitialized() const {
  return true;
}

void SummaryDataPoint::InternalSwap(SummaryDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  quantile_values_.InternalSwap(&other->quantile_values_);
  attributes_.InternalSwap(&other->attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryDataPoint, flags_)
      + sizeof(SummaryDataPoint::flags_)
      - PROTOBUF_FIELD_OFFSET(SummaryDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Exemplar::_Internal {
 public:
};

void Exemplar::clear_filtered_attributes() {
  filtered_attributes_.Clear();
}
void Exemplar::clear_filtered_labels() {
  filtered_labels_.Clear();
}
Exemplar::Exemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filtered_labels_(arena),
  filtered_attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Exemplar)
}
Exemplar::Exemplar(const Exemplar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filtered_labels_(from.filtered_labels_),
      filtered_attributes_(from.filtered_attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_id(), 
      GetArena());
  }
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  time_unix_nano_ = from.time_unix_nano_;
  clear_has_value();
  switch (from.value_case()) {
    case kAsDouble: {
      _internal_set_as_double(from._internal_as_double());
      break;
    }
    case kAsInt: {
      _internal_set_as_int(from._internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Exemplar)
}

void Exemplar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
  clear_has_value();
}

Exemplar::~Exemplar() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Exemplar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Exemplar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void Exemplar::ArenaDtor(void* object) {
  Exemplar* _this = reinterpret_cast< Exemplar* >(object);
  (void)_this;
}
void Exemplar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Exemplar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Exemplar& Exemplar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Exemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void Exemplar::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.metrics.v1.Exemplar)
  switch (value_case()) {
    case kAsDouble: {
      // No need to clear
      break;
    }
    case kAsInt: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Exemplar::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Exemplar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filtered_labels_.Clear();
  filtered_attributes_.Clear();
  span_id_.ClearToEmpty();
  trace_id_.ClearToEmpty();
  time_unix_nano_ = PROTOBUF_ULONGLONG(0);
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Exemplar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filtered_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // double as_double = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_as_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes span_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes trace_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sfixed64 as_int = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _internal_set_as_int(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filtered_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Exemplar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Exemplar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filtered_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filtered_labels(i), target, stream);
  }

  // fixed64 time_unix_nano = 2;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_time_unix_nano(), target);
  }

  // double as_double = 3;
  if (_internal_has_as_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_as_double(), target);
  }

  // bytes span_id = 4;
  if (this->span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_span_id(), target);
  }

  // bytes trace_id = 5;
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_trace_id(), target);
  }

  // sfixed64 as_int = 6;
  if (_internal_has_as_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(6, this->_internal_as_int(), target);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filtered_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_filtered_attributes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Exemplar)
  return target;
}

size_t Exemplar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Exemplar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1 [deprecated = true];
  total_size += 1UL * this->_internal_filtered_labels_size();
  for (const auto& msg : this->filtered_labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
  total_size += 1UL * this->_internal_filtered_attributes_size();
  for (const auto& msg : this->filtered_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes span_id = 4;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // bytes trace_id = 5;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // fixed64 time_unix_nano = 2;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  switch (value_case()) {
    // double as_double = 3;
    case kAsDouble: {
      total_size += 1 + 8;
      break;
    }
    // sfixed64 as_int = 6;
    case kAsInt: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Exemplar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.Exemplar)
  GOOGLE_DCHECK_NE(&from, this);
  const Exemplar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Exemplar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.Exemplar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.Exemplar)
    MergeFrom(*source);
  }
}

void Exemplar::MergeFrom(const Exemplar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Exemplar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filtered_labels_.MergeFrom(from.filtered_labels_);
  filtered_attributes_.MergeFrom(from.filtered_attributes_);
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  switch (from.value_case()) {
    case kAsDouble: {
      _internal_set_as_double(from._internal_as_double());
      break;
    }
    case kAsInt: {
      _internal_set_as_int(from._internal_as_int());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Exemplar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.Exemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exemplar::CopyFrom(const Exemplar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Exemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exemplar::IsInitialized() const {
  return true;
}

void Exemplar::InternalSwap(Exemplar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filtered_labels_.InternalSwap(&other->filtered_labels_);
  filtered_attributes_.InternalSwap(&other->filtered_attributes_);
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_unix_nano_, other->time_unix_nano_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Exemplar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntDataPoint::_Internal {
 public:
};

void IntDataPoint::clear_labels() {
  labels_.Clear();
}
IntDataPoint::IntDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  exemplars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntDataPoint)
}
IntDataPoint::IntDataPoint(const IntDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      exemplars_(from.exemplars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntDataPoint)
}

void IntDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(value_));
}

IntDataPoint::~IntDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntDataPoint::ArenaDtor(void* object) {
  IntDataPoint* _this = reinterpret_cast< IntDataPoint* >(object);
  (void)_this;
}
void IntDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntDataPoint& IntDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  exemplars_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed64 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // sfixed64 value = 4;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(4, this->_internal_value(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_exemplars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntDataPoint)
  return target;
}

size_t IntDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 5;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 value = 4;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const IntDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntDataPoint)
    MergeFrom(*source);
  }
}

void IntDataPoint::MergeFrom(const IntDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  exemplars_.MergeFrom(from.exemplars_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void IntDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntDataPoint::CopyFrom(const IntDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntDataPoint::IsInitialized() const {
  return true;
}

void IntDataPoint::InternalSwap(IntDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  exemplars_.InternalSwap(&other->exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntDataPoint, value_)
      + sizeof(IntDataPoint::value_)
      - PROTOBUF_FIELD_OFFSET(IntDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntGauge::_Internal {
 public:
};

IntGauge::IntGauge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntGauge)
}
IntGauge::IntGauge(const IntGauge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntGauge)
}

void IntGauge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
}

IntGauge::~IntGauge() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntGauge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntGauge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntGauge::ArenaDtor(void* object) {
  IntGauge* _this = reinterpret_cast< IntGauge* >(object);
  (void)_this;
}
void IntGauge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntGauge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntGauge& IntGauge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntGauge_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntGauge::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntGauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntGauge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntGauge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntGauge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntGauge)
  return target;
}

size_t IntGauge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntGauge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntGauge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntGauge)
  GOOGLE_DCHECK_NE(&from, this);
  const IntGauge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntGauge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntGauge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntGauge)
    MergeFrom(*source);
  }
}

void IntGauge::MergeFrom(const IntGauge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntGauge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
}

void IntGauge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntGauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntGauge::CopyFrom(const IntGauge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntGauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntGauge::IsInitialized() const {
  return true;
}

void IntGauge::InternalSwap(IntGauge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntGauge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntSum::_Internal {
 public:
};

IntSum::IntSum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntSum)
}
IntSum::IntSum(const IntSum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&aggregation_temporality_, &from.aggregation_temporality_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_monotonic_) -
    reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntSum)
}

void IntSum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&aggregation_temporality_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_monotonic_) -
      reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
}

IntSum::~IntSum() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntSum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntSum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntSum::ArenaDtor(void* object) {
  IntSum* _this = reinterpret_cast< IntSum* >(object);
  (void)_this;
}
void IntSum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntSum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntSum& IntSum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntSum_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntSum::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  ::memset(&aggregation_temporality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_monotonic_) -
      reinterpret_cast<char*>(&aggregation_temporality_)) + sizeof(is_monotonic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntSum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(val));
        } else goto handle_unusual;
        continue;
      // bool is_monotonic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_monotonic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntSum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  // bool is_monotonic = 3;
  if (this->is_monotonic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_monotonic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntSum)
  return target;
}

size_t IntSum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntSum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  // bool is_monotonic = 3;
  if (this->is_monotonic() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntSum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntSum)
  GOOGLE_DCHECK_NE(&from, this);
  const IntSum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntSum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntSum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntSum)
    MergeFrom(*source);
  }
}

void IntSum::MergeFrom(const IntSum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntSum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.aggregation_temporality() != 0) {
    _internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
  if (from.is_monotonic() != 0) {
    _internal_set_is_monotonic(from._internal_is_monotonic());
  }
}

void IntSum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntSum::CopyFrom(const IntSum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntSum::IsInitialized() const {
  return true;
}

void IntSum::InternalSwap(IntSum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntSum, is_monotonic_)
      + sizeof(IntSum::is_monotonic_)
      - PROTOBUF_FIELD_OFFSET(IntSum, aggregation_temporality_)>(
          reinterpret_cast<char*>(&aggregation_temporality_),
          reinterpret_cast<char*>(&other->aggregation_temporality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntSum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntHistogramDataPoint::_Internal {
 public:
};

void IntHistogramDataPoint::clear_labels() {
  labels_.Clear();
}
IntHistogramDataPoint::IntHistogramDataPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena),
  bucket_counts_(arena),
  explicit_bounds_(arena),
  exemplars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
}
IntHistogramDataPoint::IntHistogramDataPoint(const IntHistogramDataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      bucket_counts_(from.bucket_counts_),
      explicit_bounds_(from.explicit_bounds_),
      exemplars_(from.exemplars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_time_unix_nano_, &from.start_time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
    reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
}

void IntHistogramDataPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
}

IntHistogramDataPoint::~IntHistogramDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntHistogramDataPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntHistogramDataPoint::ArenaDtor(void* object) {
  IntHistogramDataPoint* _this = reinterpret_cast< IntHistogramDataPoint* >(object);
  (void)_this;
}
void IntHistogramDataPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntHistogramDataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntHistogramDataPoint& IntHistogramDataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntHistogramDataPoint_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntHistogramDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  bucket_counts_.Clear();
  explicit_bounds_.Clear();
  exemplars_.Clear();
  ::memset(&start_time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&start_time_unix_nano_)) + sizeof(sum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntHistogramDataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 start_time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // fixed64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed64 sum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 bucket_counts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated double explicit_bounds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_explicit_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_explicit_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exemplars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntHistogramDataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_start_time_unix_nano(), target);
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_time_unix_nano(), target);
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_count(), target);
  }

  // sfixed64 sum = 5;
  if (this->sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(5, this->_internal_sum(), target);
  }

  // repeated fixed64 bucket_counts = 6;
  if (this->_internal_bucket_counts_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_bucket_counts(), target);
  }

  // repeated double explicit_bounds = 7;
  if (this->_internal_explicit_bounds_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_explicit_bounds(), target);
  }

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exemplars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_exemplars(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  return target;
}

size_t IntHistogramDataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue labels = 1;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 bucket_counts = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_counts_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double explicit_bounds = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_explicit_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _explicit_bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .opentelemetry.proto.metrics.v1.IntExemplar exemplars = 8;
  total_size += 1UL * this->_internal_exemplars_size();
  for (const auto& msg : this->exemplars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 start_time_unix_nano = 2;
  if (this->start_time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_unix_nano = 3;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 count = 4;
  if (this->count() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 sum = 5;
  if (this->sum() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntHistogramDataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const IntHistogramDataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntHistogramDataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
    MergeFrom(*source);
  }
}

void IntHistogramDataPoint::MergeFrom(const IntHistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  bucket_counts_.MergeFrom(from.bucket_counts_);
  explicit_bounds_.MergeFrom(from.explicit_bounds_);
  exemplars_.MergeFrom(from.exemplars_);
  if (from.start_time_unix_nano() != 0) {
    _internal_set_start_time_unix_nano(from._internal_start_time_unix_nano());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.sum() != 0) {
    _internal_set_sum(from._internal_sum());
  }
}

void IntHistogramDataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntHistogramDataPoint::CopyFrom(const IntHistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntHistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntHistogramDataPoint::IsInitialized() const {
  return true;
}

void IntHistogramDataPoint::InternalSwap(IntHistogramDataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  bucket_counts_.InternalSwap(&other->bucket_counts_);
  explicit_bounds_.InternalSwap(&other->explicit_bounds_);
  exemplars_.InternalSwap(&other->exemplars_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntHistogramDataPoint, sum_)
      + sizeof(IntHistogramDataPoint::sum_)
      - PROTOBUF_FIELD_OFFSET(IntHistogramDataPoint, start_time_unix_nano_)>(
          reinterpret_cast<char*>(&start_time_unix_nano_),
          reinterpret_cast<char*>(&other->start_time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntHistogramDataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntHistogram::_Internal {
 public:
};

IntHistogram::IntHistogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntHistogram)
}
IntHistogram::IntHistogram(const IntHistogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aggregation_temporality_ = from.aggregation_temporality_;
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntHistogram)
}

void IntHistogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  aggregation_temporality_ = 0;
}

IntHistogram::~IntHistogram() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntHistogram)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntHistogram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntHistogram::ArenaDtor(void* object) {
  IntHistogram* _this = reinterpret_cast< IntHistogram* >(object);
  (void)_this;
}
void IntHistogram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntHistogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntHistogram& IntHistogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntHistogram_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntHistogram::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  aggregation_temporality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntHistogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation_temporality(static_cast<::opentelemetry::proto::metrics::v1::AggregationTemporality>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntHistogram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntHistogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data_points(i), target, stream);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_aggregation_temporality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntHistogram)
  return target;
}

size_t IntHistogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntHistogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.metrics.v1.IntHistogramDataPoint data_points = 1;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
  if (this->aggregation_temporality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregation_temporality());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntHistogram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntHistogram)
  GOOGLE_DCHECK_NE(&from, this);
  const IntHistogram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntHistogram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntHistogram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntHistogram)
    MergeFrom(*source);
  }
}

void IntHistogram::MergeFrom(const IntHistogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntHistogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.aggregation_temporality() != 0) {
    _internal_set_aggregation_temporality(from._internal_aggregation_temporality());
  }
}

void IntHistogram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntHistogram::CopyFrom(const IntHistogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntHistogram::IsInitialized() const {
  return true;
}

void IntHistogram::InternalSwap(IntHistogram* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  swap(aggregation_temporality_, other->aggregation_temporality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntHistogram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntExemplar::_Internal {
 public:
};

void IntExemplar::clear_filtered_labels() {
  filtered_labels_.Clear();
}
IntExemplar::IntExemplar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filtered_labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.IntExemplar)
}
IntExemplar::IntExemplar(const IntExemplar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filtered_labels_(from.filtered_labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_span_id(), 
      GetArena());
  }
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace_id().empty()) {
    trace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_trace_id(), 
      GetArena());
  }
  ::memcpy(&time_unix_nano_, &from.time_unix_nano_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.IntExemplar)
}

void IntExemplar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&time_unix_nano_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(value_));
}

IntExemplar::~IntExemplar() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.IntExemplar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntExemplar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntExemplar::ArenaDtor(void* object) {
  IntExemplar* _this = reinterpret_cast< IntExemplar* >(object);
  (void)_this;
}
void IntExemplar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntExemplar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntExemplar& IntExemplar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntExemplar_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto.base);
  return *internal_default_instance();
}


void IntExemplar::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.IntExemplar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filtered_labels_.Clear();
  span_id_.ClearToEmpty();
  trace_id_.ClearToEmpty();
  ::memset(&time_unix_nano_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&time_unix_nano_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntExemplar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filtered_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // fixed64 time_unix_nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          time_unix_nano_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // bytes span_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_span_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes trace_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_trace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntExemplar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.IntExemplar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filtered_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_filtered_labels(i), target, stream);
  }

  // fixed64 time_unix_nano = 2;
  if (this->time_unix_nano() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_time_unix_nano(), target);
  }

  // sfixed64 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(3, this->_internal_value(), target);
  }

  // bytes span_id = 4;
  if (this->span_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_span_id(), target);
  }

  // bytes trace_id = 5;
  if (this->trace_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_trace_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.IntExemplar)
  return target;
}

size_t IntExemplar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.IntExemplar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opentelemetry.proto.common.v1.StringKeyValue filtered_labels = 1;
  total_size += 1UL * this->_internal_filtered_labels_size();
  for (const auto& msg : this->filtered_labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes span_id = 4;
  if (this->span_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_span_id());
  }

  // bytes trace_id = 5;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trace_id());
  }

  // fixed64 time_unix_nano = 2;
  if (this->time_unix_nano() != 0) {
    total_size += 1 + 8;
  }

  // sfixed64 value = 3;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntExemplar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:opentelemetry.proto.metrics.v1.IntExemplar)
  GOOGLE_DCHECK_NE(&from, this);
  const IntExemplar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntExemplar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:opentelemetry.proto.metrics.v1.IntExemplar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:opentelemetry.proto.metrics.v1.IntExemplar)
    MergeFrom(*source);
  }
}

void IntExemplar::MergeFrom(const IntExemplar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.IntExemplar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filtered_labels_.MergeFrom(from.filtered_labels_);
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.trace_id().size() > 0) {
    _internal_set_trace_id(from._internal_trace_id());
  }
  if (from.time_unix_nano() != 0) {
    _internal_set_time_unix_nano(from._internal_time_unix_nano());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void IntExemplar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:opentelemetry.proto.metrics.v1.IntExemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntExemplar::CopyFrom(const IntExemplar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.IntExemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntExemplar::IsInitialized() const {
  return true;
}

void IntExemplar::InternalSwap(IntExemplar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filtered_labels_.InternalSwap(&other->filtered_labels_);
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trace_id_.Swap(&other->trace_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntExemplar, value_)
      + sizeof(IntExemplar::value_)
      - PROTOBUF_FIELD_OFFSET(IntExemplar, time_unix_nano_)>(
          reinterpret_cast<char*>(&time_unix_nano_),
          reinterpret_cast<char*>(&other->time_unix_nano_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntExemplar::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::MetricsData* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::MetricsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::MetricsData >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::ResourceMetrics* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::ResourceMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::ResourceMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::InstrumentationLibraryMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::Metric* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Metric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::Metric >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::Gauge* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Gauge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::Gauge >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::Sum* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Sum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::Sum >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::Histogram* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Histogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::Histogram >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::ExponentialHistogram* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::ExponentialHistogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::ExponentialHistogram >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::Summary* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::NumberDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::NumberDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::NumberDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::HistogramDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::HistogramDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::HistogramDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::SummaryDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::SummaryDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::SummaryDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::Exemplar* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::Exemplar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::Exemplar >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntGauge* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntGauge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntGauge >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntSum* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntSum >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntHistogramDataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntHistogram* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntHistogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntHistogram >(arena);
}
template<> PROTOBUF_NOINLINE ::opentelemetry::proto::metrics::v1::IntExemplar* Arena::CreateMaybeMessage< ::opentelemetry::proto::metrics::v1::IntExemplar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opentelemetry::proto::metrics::v1::IntExemplar >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
