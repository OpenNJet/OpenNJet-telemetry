FROM centos:7

ARG GRPC_VERSION="1.36.4"
ARG OPENTELEMETRY_VERSION="1.2.0"
ARG BOOST_VERSION="1.75.0"
ARG BOOST_FILENAME="boost_1_75_0"
ARG APR_VERSION="1.7.4"
ARG EXPAT_VERSION="2.3.0"
ARG EXPAT_RVERSION="R_2_3_0"
ARG APRUTIL_VERSION="1.6.3"
ARG LOG4CXX_VERSION="0.11.0"
ARG GTEST_VERSION="1.10.0"
ARG PCRE_VERSION="8.44"


RUN rm -rf /etc/yum.repos.d/*.repo 
COPY ./repos/*.repo /etc/yum.repos.d/

#RUN yum update -y \
#    && yum install -y \
#    && yum install wget -y \
#    && yum install pcre-devel -y \
#    && yum install xz -y \
#    && yum install httpd -y \
#

RUN yum update -y
RUN yum install -y gcc gcc-c++ \
           libtool libtool-ltdl cmake3 \
           make cmake perl perl-CPAN \
           zlib-devel cmake perl-IPC-Cmd \

RUN yum install -y pkgconfig vim-common \
           sudo m4 deltarpm openssl-devel

RUN yum install -y automake autoconf \
           yum-utils rpm-build

RUN yum -y install centos-release-scl \
  && yum install yum-utils -y \
  && yum-config-manager --enable rhel-server-rhscl-7-rpms -y \
  && yum install devtoolset-7 -y \
  && yum clean all
ENV PATH="/opt/rh/devtoolset-7/root/usr/bin:${PATH}"

RUN git clone --shallow-submodules --depth 1 --recurse-submodules -b v${GRPC_VERSION} \
        https://github.com/grpc/grpc \
  && cd grpc \
  && mkdir -p cmake/build \
  && cd cmake/build \
  && cmake3 \
    -DgRPC_INSTALL=ON \
    -DCMAKE_BUILD_TYPE=Release \
    -DgRPC_ABSL_PROVIDER=module \
    -DgRPC_CARES_PROVIDER=module \
    -DgRPC_PROTOBUF_PROVIDER=module \
    -DgRPC_RE2_PROVIDER=module  \
    -DgRPC_SSL_PROVIDER=module  \
    -DgRPC_ZLIB_PROVIDER=module \
    -DgRPC_BUILD_TESTS=OFF \
    -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF \
    -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF \
    -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \
    -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \
    -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF \
    -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \
    ../.. \
  && make -j2 \
  && make install \
  && cp grpc_cpp_plugin /usr/bin/ \
  && cd ../../.. \
  && rm -rf grpc

COPY opentelemetry-cpp opentelemetry-cpp
RUN cd opentelemetry-cpp/ \
    && mkdir build \
    && cd build \
    && cmake3 .. -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DBUILD_TESTING=OFF -DBUILD_SHARED_LIBS=ON -DWITH_OTLP=ON -DWITH_OTLP_GRPC=ON -DWITH_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=/dependencies/opentelemetry/${OPENTELEMETRY_VERSION} \
    && cmake3 --build . --target all \
    && make install \
    && cd .. \
    && find . -name "*.so" -type f -exec cp {} /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/lib/ \; \
    && cp build/libopentelemetry_proto.a /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/lib \
    && cp -r api/include/ /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/ \
    && for dir in exporters/*; do if [ -d "$dir" ]; then cp -rf "$dir/include" /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/; fi; done \
    && cp -r sdk/include/ /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/ \
    && cp -r build/generated/third_party/opentelemetry-proto/opentelemetry/proto/ /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/include/opentelemetry/ \
    && cd .. && rm -rf opentelemetry-cpp

##install Apr
RUN yum install -y wget
RUN mkdir -p dependencies/apr/${APR_VERSION} \
    && wget https://dlcdn.apache.org//apr/apr-${APR_VERSION}.tar.gz --no-check-certificate \
    && tar -xf apr-${APR_VERSION}.tar.gz \
    && cd apr-${APR_VERSION} \
    && ./configure --prefix=/dependencies/apr/${APR_VERSION} --enable-static=yes --enable-shared=no --with-pic && echo $? \
    && make -j 6 \
    && make install \
    && cd ../ && rm -rf apr-${APR_VERSION} && rm -rf apr-${APR_VERSION}.tar.gz

# install libexpat
RUN mkdir -p dependencies/expat/${EXPAT_VERSION}
COPY expat-${EXPAT_VERSION}.tar.gz expat-${EXPAT_VERSION}.tar.gz
RUN tar -xf expat-${EXPAT_VERSION}.tar.gz \
    && cd expat-${EXPAT_VERSION} \
    && ./configure --prefix=/dependencies/expat/${EXPAT_VERSION} --enable-static=yes --enable-shared=no --with-pic && echo $? \
    && make -j 6 \
    && make install \
    && cd ../ && rm -rf expat-${EXPAT_VERSION} && rm -rf expat-${EXPAT_VERSION}.tar.gz

# install Apr-util
RUN mkdir -p dependencies/apr-util/${APRUTIL_VERSION}
COPY apr-util-${APRUTIL_VERSION}.tar.gz apr-util-${APRUTIL_VERSION}.tar.gz
RUN tar -xf apr-util-${APRUTIL_VERSION}.tar.gz \
    && cd apr-util-${APRUTIL_VERSION} \
    && ./configure --prefix=/dependencies/apr-util/${APRUTIL_VERSION} --with-apr=/dependencies/apr/${APR_VERSION} --with-expat=/dependencies/expat/2.3.0 && echo $? \
    && make -j 6 \
    && make install \
    && cd ../ && rm -rf apr-util-${APRUTIL_VERSION} && rm -rf apr-util-${APRUTIL_VERSION}.tar.gz

#Build and install boost
RUN wget https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/${BOOST_FILENAME}.tar.gz \
    && tar -xvf ${BOOST_FILENAME}.tar.gz \
    && cd ${BOOST_FILENAME} \
    && ./bootstrap.sh --with-libraries=filesystem,system --prefix=/dependencies/boost/${BOOST_VERSION}/ \
    && ./b2 install define=BOOST_ERROR_CODE_HEADER_ONLY link=static threading=multi cxxflags="-fvisibility=hidden -fPIC" cflags="-fvisibility=hidden -fPIC" \
    && cd .. && rm -rf ${BOOST_FILENAME} && rm ${BOOST_FILENAME}.tar.gz

RUN yum install -y log4cxx log4cxx-devel.x86_64
RUN mkdir /dependencies/baselib
RUN cp /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/lib64/lib*.so /dependencies/baselib/
RUN rm -rf /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/lib
RUN mv /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/lib64 /dependencies/opentelemetry/${OPENTELEMETRY_VERSION}/lib

#RUN cp /dependencies/apr/${APR_VERSION}/lib/lib* /dependencies/baselib/
#RUN cp /dependencies/apr-util/${APRUTIL_VERSION}/lib/lib* /dependencies/baselib/
RUN cp /usr/lib64/liblog4cxx.so.10 /dependencies/baselib/
RUN cp /usr/lib64/libapr-1.so.0 /dependencies/baselib/
RUN cp /usr/lib64/libaprutil-1.so.0 /dependencies/baselib/


RUN yum install java-1.8.0-openjdk -y

# Build Webserver sdk
COPY otel-webserver-module /otel-webserver-module

RUN cp -r /dependencies /otel-webserver-module/ \
    && cd otel-webserver-module \
    && ./gradlew buildLibrary -DtargetSystem=centos \
    && cp ./build/linux-x64/out/Default/lib.target/libopentelemetry_webserver_sdk.so /dependencies/baselib/ \
    && cd ../ && rm -rf otel-webserver-module


#COPY entrypoint.sh /usr/local/bin/
#ENTRYPOINT ["entrypoint.sh"]

