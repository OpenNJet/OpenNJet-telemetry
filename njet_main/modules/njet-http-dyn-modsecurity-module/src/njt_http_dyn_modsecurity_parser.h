

/* This file was generated by JSON Schema to C.
 * Any changes made to it will be lost on regeneration. 

 * Copyright (C) 2021-2023  TMLake(Beijing) Technology Co., Ltd.
 */

#ifndef PARSER_MODSEC_H
#define PARSER_MODSEC_H
#include <stdint.h>
#include <stdbool.h>
#include "njt_core.h"
#include "js2c_njet_builtins.h"
/* ===================== Generated type declarations ===================== */
typedef struct dynmodsecurity_locationDef_t_s dynmodsecurity_locationDef_t; //forward decl for public definition
typedef njt_str_t dynmodsecurity_locationDef_location_t;

typedef bool dynmodsecurity_locationDef_modsecurity_enable_t;
typedef njt_str_t dynmodsecurity_locationDef_modsecurity_rules_file_t;

typedef njt_str_t dynmodsecurity_locationDef_modsecurity_rules_remote_t;

typedef njt_str_t dynmodsecurity_locationDef_modsecurity_rules_t;

typedef njt_str_t dynmodsecurity_locationDef_modsecurity_transaction_id_t;

typedef struct dynmodsecurity_locationDef_modsecurity_t_s {
    dynmodsecurity_locationDef_modsecurity_enable_t enable;
    dynmodsecurity_locationDef_modsecurity_rules_file_t rules_file;
    dynmodsecurity_locationDef_modsecurity_rules_remote_t rules_remote;
    dynmodsecurity_locationDef_modsecurity_rules_t rules;
    dynmodsecurity_locationDef_modsecurity_transaction_id_t transaction_id;
    unsigned int is_enable_set:1;
    unsigned int is_rules_file_set:1;
    unsigned int is_rules_remote_set:1;
    unsigned int is_rules_set:1;
    unsigned int is_transaction_id_set:1;
} dynmodsecurity_locationDef_modsecurity_t;

typedef dynmodsecurity_locationDef_t dynmodsecurity_locationDef_locations_item_t; //ref def
typedef njt_array_t  dynmodsecurity_locationDef_locations_t;
typedef struct dynmodsecurity_locationDef_t_s {
    dynmodsecurity_locationDef_location_t location;
    dynmodsecurity_locationDef_modsecurity_t *modsecurity;
    dynmodsecurity_locationDef_locations_t *locations;
    unsigned int is_location_set:1;
    unsigned int is_modsecurity_set:1;
    unsigned int is_locations_set:1;
} dynmodsecurity_locationDef_t;

dynmodsecurity_locationDef_modsecurity_enable_t get_dynmodsecurity_locationDef_modsecurity_enable(dynmodsecurity_locationDef_modsecurity_t *out);
dynmodsecurity_locationDef_modsecurity_rules_file_t* get_dynmodsecurity_locationDef_modsecurity_rules_file(dynmodsecurity_locationDef_modsecurity_t *out);
dynmodsecurity_locationDef_modsecurity_rules_remote_t* get_dynmodsecurity_locationDef_modsecurity_rules_remote(dynmodsecurity_locationDef_modsecurity_t *out);
dynmodsecurity_locationDef_modsecurity_rules_t* get_dynmodsecurity_locationDef_modsecurity_rules(dynmodsecurity_locationDef_modsecurity_t *out);
dynmodsecurity_locationDef_modsecurity_transaction_id_t* get_dynmodsecurity_locationDef_modsecurity_transaction_id(dynmodsecurity_locationDef_modsecurity_t *out);
dynmodsecurity_locationDef_locations_item_t* get_dynmodsecurity_locationDef_locations_item(dynmodsecurity_locationDef_locations_t *out, size_t idx);
dynmodsecurity_locationDef_location_t* get_dynmodsecurity_locationDef_location(dynmodsecurity_locationDef_t *out);
dynmodsecurity_locationDef_modsecurity_t* get_dynmodsecurity_locationDef_modsecurity(dynmodsecurity_locationDef_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dynmodsecurity_locationDef_locations_t* get_dynmodsecurity_locationDef_locations(dynmodsecurity_locationDef_t *out);
void set_dynmodsecurity_locationDef_location(dynmodsecurity_locationDef_t* obj, dynmodsecurity_locationDef_location_t* field);
void set_dynmodsecurity_locationDef_modsecurity_enable(dynmodsecurity_locationDef_modsecurity_t* obj, dynmodsecurity_locationDef_modsecurity_enable_t field);
void set_dynmodsecurity_locationDef_modsecurity_rules_file(dynmodsecurity_locationDef_modsecurity_t* obj, dynmodsecurity_locationDef_modsecurity_rules_file_t* field);
void set_dynmodsecurity_locationDef_modsecurity_rules_remote(dynmodsecurity_locationDef_modsecurity_t* obj, dynmodsecurity_locationDef_modsecurity_rules_remote_t* field);
void set_dynmodsecurity_locationDef_modsecurity_rules(dynmodsecurity_locationDef_modsecurity_t* obj, dynmodsecurity_locationDef_modsecurity_rules_t* field);
void set_dynmodsecurity_locationDef_modsecurity_transaction_id(dynmodsecurity_locationDef_modsecurity_t* obj, dynmodsecurity_locationDef_modsecurity_transaction_id_t* field);
dynmodsecurity_locationDef_modsecurity_t* create_dynmodsecurity_locationDef_modsecurity(njt_pool_t *pool);
void set_dynmodsecurity_locationDef_modsecurity(dynmodsecurity_locationDef_t* obj, dynmodsecurity_locationDef_modsecurity_t* field);
int add_item_dynmodsecurity_locationDef_locations(dynmodsecurity_locationDef_locations_t *src, dynmodsecurity_locationDef_locations_item_t* items);
dynmodsecurity_locationDef_locations_t* create_dynmodsecurity_locationDef_locations(njt_pool_t *pool, size_t nelts);
void set_dynmodsecurity_locationDef_locations(dynmodsecurity_locationDef_t* obj, dynmodsecurity_locationDef_locations_t* field);
dynmodsecurity_locationDef_t* create_dynmodsecurity_locationDef(njt_pool_t *pool);
typedef njt_str_t dynmodsecurity_servers_item_listens_item_t;

typedef njt_array_t  dynmodsecurity_servers_item_listens_t;
typedef njt_str_t dynmodsecurity_servers_item_serverNames_item_t;

typedef njt_array_t  dynmodsecurity_servers_item_serverNames_t;
typedef dynmodsecurity_locationDef_t dynmodsecurity_servers_item_locations_item_t; //ref def
typedef njt_array_t  dynmodsecurity_servers_item_locations_t;
typedef struct dynmodsecurity_servers_item_t_s {
    dynmodsecurity_servers_item_listens_t *listens;
    dynmodsecurity_servers_item_serverNames_t *serverNames;
    dynmodsecurity_servers_item_locations_t *locations;
    unsigned int is_listens_set:1;
    unsigned int is_serverNames_set:1;
    unsigned int is_locations_set:1;
} dynmodsecurity_servers_item_t;

typedef njt_array_t  dynmodsecurity_servers_t;
typedef struct dynmodsecurity_t_s {
    dynmodsecurity_servers_t *servers;
    unsigned int is_servers_set:1;
} dynmodsecurity_t;

dynmodsecurity_servers_item_listens_item_t* get_dynmodsecurity_servers_item_listens_item(dynmodsecurity_servers_item_listens_t *out, size_t idx);
dynmodsecurity_servers_item_serverNames_item_t* get_dynmodsecurity_servers_item_serverNames_item(dynmodsecurity_servers_item_serverNames_t *out, size_t idx);
dynmodsecurity_servers_item_locations_item_t* get_dynmodsecurity_servers_item_locations_item(dynmodsecurity_servers_item_locations_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
dynmodsecurity_servers_item_listens_t* get_dynmodsecurity_servers_item_listens(dynmodsecurity_servers_item_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dynmodsecurity_servers_item_serverNames_t* get_dynmodsecurity_servers_item_serverNames(dynmodsecurity_servers_item_t *out);
// CHECK ARRAY not exceeding bounds before calling this func
dynmodsecurity_servers_item_locations_t* get_dynmodsecurity_servers_item_locations(dynmodsecurity_servers_item_t *out);
dynmodsecurity_servers_item_t* get_dynmodsecurity_servers_item(dynmodsecurity_servers_t *out, size_t idx);
// CHECK ARRAY not exceeding bounds before calling this func
dynmodsecurity_servers_t* get_dynmodsecurity_servers(dynmodsecurity_t *out);
int add_item_dynmodsecurity_servers_item_listens(dynmodsecurity_servers_item_listens_t *src, dynmodsecurity_servers_item_listens_item_t* items);
dynmodsecurity_servers_item_listens_t* create_dynmodsecurity_servers_item_listens(njt_pool_t *pool, size_t nelts);
void set_dynmodsecurity_servers_item_listens(dynmodsecurity_servers_item_t* obj, dynmodsecurity_servers_item_listens_t* field);
int add_item_dynmodsecurity_servers_item_serverNames(dynmodsecurity_servers_item_serverNames_t *src, dynmodsecurity_servers_item_serverNames_item_t* items);
dynmodsecurity_servers_item_serverNames_t* create_dynmodsecurity_servers_item_serverNames(njt_pool_t *pool, size_t nelts);
void set_dynmodsecurity_servers_item_serverNames(dynmodsecurity_servers_item_t* obj, dynmodsecurity_servers_item_serverNames_t* field);
int add_item_dynmodsecurity_servers_item_locations(dynmodsecurity_servers_item_locations_t *src, dynmodsecurity_servers_item_locations_item_t* items);
dynmodsecurity_servers_item_locations_t* create_dynmodsecurity_servers_item_locations(njt_pool_t *pool, size_t nelts);
void set_dynmodsecurity_servers_item_locations(dynmodsecurity_servers_item_t* obj, dynmodsecurity_servers_item_locations_t* field);
dynmodsecurity_servers_item_t* create_dynmodsecurity_servers_item(njt_pool_t *pool);
int add_item_dynmodsecurity_servers(dynmodsecurity_servers_t *src, dynmodsecurity_servers_item_t* items);
dynmodsecurity_servers_t* create_dynmodsecurity_servers(njt_pool_t *pool, size_t nelts);
void set_dynmodsecurity_servers(dynmodsecurity_t* obj, dynmodsecurity_servers_t* field);
dynmodsecurity_t* create_dynmodsecurity(njt_pool_t *pool);
dynmodsecurity_t* json_parse_dynmodsecurity(njt_pool_t *pool, const njt_str_t *json_string, js2c_parse_error_t *err_ret);
njt_str_t* to_json_dynmodsecurity(njt_pool_t *pool, dynmodsecurity_t *out, njt_int_t flags);
#endif /* PARSER_MODSEC_H */
